"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const testing_1 = require("@nrwl/workspace/testing");
const testing_2 = require("../../utils/testing");
describe('jest', () => {
    let appTree;
    beforeEach(() => {
        appTree = schematics_1.Tree.empty();
        appTree = testing_1.createEmptyWorkspace(appTree);
    });
    it('should generate files', () => __awaiter(void 0, void 0, void 0, function* () {
        const resultTree = yield testing_2.runSchematic('init', {}, appTree);
        expect(resultTree.exists('jest.config.js')).toBeTruthy();
    }));
    it('should not override existing files', () => __awaiter(void 0, void 0, void 0, function* () {
        appTree.create('jest.config.js', `test`);
        const resultTree = yield testing_2.runSchematic('ng-add', {}, appTree);
        expect(resultTree.read('jest.config.js').toString()).toEqual('test');
    }));
    it('should add dependencies', () => __awaiter(void 0, void 0, void 0, function* () {
        const resultTree = yield testing_2.runSchematic('init', {}, appTree);
        const packageJson = workspace_1.readJsonInTree(resultTree, 'package.json');
        expect(packageJson.devDependencies.jest).toBeDefined();
        expect(packageJson.devDependencies['@nrwl/jest']).toBeDefined();
        expect(packageJson.devDependencies['@types/jest']).toBeDefined();
        expect(packageJson.devDependencies['ts-jest']).toBeDefined();
    }));
    it('should add babel dependencies', () => __awaiter(void 0, void 0, void 0, function* () {
        const resultTree = yield testing_2.runSchematic('init', { babelJest: true }, appTree);
        const packageJson = workspace_1.readJsonInTree(resultTree, 'package.json');
        expect(packageJson.devDependencies['@babel/core']).toBeDefined();
        expect(packageJson.devDependencies['@babel/preset-env']).toBeDefined();
        expect(packageJson.devDependencies['@babel/preset-typescript']).toBeDefined();
        expect(packageJson.devDependencies['@babel/preset-react']).toBeDefined();
        expect(packageJson.devDependencies['babel-jest']).toBeDefined();
    }));
});
