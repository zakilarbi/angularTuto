"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const ast_utils_1 = require("@nrwl/workspace/src/utils/ast-utils");
const testing_1 = require("@angular-devkit/schematics/testing");
const path = require("path");
const testing_2 = require("@nrwl/workspace/testing");
const workspace_1 = require("@nrwl/workspace");
const fs_1 = require("fs");
describe('Update 9.0.1', () => {
    let initialTree;
    let schematicRunner;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        initialTree = testing_2.createEmptyWorkspace(schematics_1.Tree.empty());
        schematicRunner = new testing_1.SchematicTestRunner('@nrwl/jest', path.join(__dirname, '../../../migrations.json'));
    }));
    it('should remove passWithNoTests in jest.config.js', () => __awaiter(void 0, void 0, void 0, function* () {
        initialTree.create('jest.config.js', fs_1.readFileSync(path.join(__dirname, './test-files/jest.config.js')).toString());
        const initialJestConfigFile = initialTree.read('jest.config.js').toString();
        expect(initialJestConfigFile).toContain('passWithNoTests: true');
        const result = yield schematicRunner
            .runSchematicAsync('update-9.0.1', {}, initialTree)
            .toPromise();
        const updatedJestConfigFile = result.readContent('jest.config.js');
        expect(updatedJestConfigFile).not.toContain('passWithNoTests: true');
        //check if the file is still valid
        expect(updatedJestConfigFile.match(/,/g) || []).toHaveLength(6);
        expect(updatedJestConfigFile).toContain('}');
        expect(updatedJestConfigFile).toContain('{');
    }));
    it('should add passWithNoTests to workspace.json where it does not exist', () => __awaiter(void 0, void 0, void 0, function* () {
        initialTree.overwrite('workspace.json', workspace_1.serializeJson({
            version: 1,
            projects: {
                'angular-one': {
                    architect: {
                        test: {
                            builder: '@nrwl/jest:jest',
                            options: {
                                jestConfig: 'apps/angular-one/jest.config.js'
                            }
                        }
                    }
                },
                'angular-two': {
                    architect: {
                        test: {
                            builder: '@nrwl/jest:jest',
                            options: {
                                passWithNoTests: false
                            }
                        }
                    }
                },
                other1: {
                    architect: {
                        'other-architect': {
                            builder: 'other',
                            options: {
                                foo: 'bar'
                            }
                        },
                        test: {
                            builder: '@nrwl/jest:jest',
                            options: {}
                        }
                    }
                }
            }
        }));
        yield schematicRunner
            .runSchematicAsync('update-9.0.1', {}, initialTree)
            .toPromise();
        const workspaceJson = ast_utils_1.readJsonInTree(initialTree, 'workspace.json');
        expect(workspaceJson.projects['angular-one'].architect.test.options
            .passWithNoTests).toBeTruthy();
        expect(workspaceJson.projects['angular-two'].architect.test.options
            .passWithNoTests).toBeFalsy();
        expect(workspaceJson.projects.other1.architect['other-architect'].options
            .passWithNoTests).toBeUndefined();
        expect(workspaceJson.projects.other1.architect.test.options.passWithNoTests).toBeTruthy();
    }));
    it('should add passWithNoTests to angular.json where it does not exist', () => __awaiter(void 0, void 0, void 0, function* () {
        initialTree.create('angular.json', JSON.stringify({
            version: 1,
            projects: {
                frontend: {
                    architect: {
                        jest1: {
                            builder: '@nrwl/jest:jest',
                            options: {
                                foo: 'bar'
                            }
                        },
                        jest2: {
                            builder: '@nrwl/jest:jest',
                            options: {
                                foo: 'bar',
                                passWithNoTests: false
                            }
                        },
                        other1: {
                            options: {
                                foo: 'bar'
                            }
                        }
                    }
                }
            }
        }));
        yield schematicRunner
            .runSchematicAsync('update-9.0.1', {}, initialTree)
            .toPromise();
        const angularJson = ast_utils_1.readJsonInTree(initialTree, 'angular.json');
        expect(angularJson.projects.frontend.architect.jest1.options.passWithNoTests).toBeTruthy();
        expect(angularJson.projects.frontend.architect.jest2.options.passWithNoTests).toBeFalsy();
        expect(angularJson.projects.frontend.architect.other1.options.passWithNoTests).toBeUndefined();
    }));
});
