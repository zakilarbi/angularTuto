"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const path = require("path");
const fs_1 = require("fs");
describe('Update 8.3.0', () => {
    let initialTree;
    let schematicRunner;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        initialTree = schematics_1.Tree.empty();
        schematicRunner = new testing_1.SchematicTestRunner('@nrwl/jest', path.join(__dirname, '../../../migrations.json'));
    }));
    it('should collectCoverage to false in the jest.config.js', () => __awaiter(void 0, void 0, void 0, function* () {
        initialTree.create('jest.config.js', fs_1.readFileSync(path.join(__dirname, './test-files/jest.config.js')).toString());
        const result = yield schematicRunner
            .runSchematicAsync('update-8.3.0', {}, initialTree)
            .toPromise();
        const updatedJestConfigFile = result.readContent('jest.config.js');
        expect(updatedJestConfigFile).not.toContain('collectCoverage: true');
        //check if the file is still valid
        expect(updatedJestConfigFile.match(/,/g) || []).toHaveLength(6);
        expect(updatedJestConfigFile).toContain('}');
        expect(updatedJestConfigFile).toContain('{');
    }));
});
