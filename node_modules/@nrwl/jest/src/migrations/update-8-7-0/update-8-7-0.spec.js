"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const ast_utils_1 = require("@nrwl/workspace/src/utils/ast-utils");
const testing_1 = require("@angular-devkit/schematics/testing");
const path = require("path");
describe('Update 8.7.0', () => {
    let tree;
    let schematicRunner;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = schematics_1.Tree.empty();
        schematicRunner = new testing_1.SchematicTestRunner('@nrwl/jest', path.join(__dirname, '../../../migrations.json'));
    }));
    it('should convert testPathPattern option to an array', () => __awaiter(void 0, void 0, void 0, function* () {
        tree.create('angular.json', JSON.stringify({
            version: 1,
            projects: {
                test: {
                    architect: {
                        jest1: {
                            builder: '@nrwl/jest:jest',
                            options: {
                                testPathPattern: 'some/test/path'
                            }
                        },
                        jest2: {
                            builder: '@nrwl/jest:jest',
                            options: {
                                foo: 'bar'
                            }
                        },
                        jest3: {
                            builder: '@nrwl/jest:jest'
                        }
                    }
                }
            }
        }));
        yield schematicRunner
            .runSchematicAsync('update-8.7.0', {}, tree)
            .toPromise();
        const angularJson = ast_utils_1.readJsonInTree(tree, 'angular.json');
        expect(angularJson.projects.test.architect.jest1.options.testPathPattern).toEqual(['some/test/path']);
        expect(angularJson.projects.test.architect.jest2.options.testPathPattern).toBeUndefined();
    }));
});
