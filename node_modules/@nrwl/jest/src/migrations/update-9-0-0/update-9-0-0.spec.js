"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const ast_utils_1 = require("@nrwl/workspace/src/utils/ast-utils");
const testing_1 = require("@angular-devkit/schematics/testing");
const path = require("path");
const testing_2 = require("@nrwl/workspace/testing");
const workspace_1 = require("@nrwl/workspace");
describe('Update 9.0.0', () => {
    let initialTree;
    let schematicRunner;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        initialTree = testing_2.createEmptyWorkspace(schematics_1.Tree.empty());
        schematicRunner = new testing_1.SchematicTestRunner('@nrwl/jest', path.join(__dirname, '../../../migrations.json'));
        initialTree.overwrite('package.json', workspace_1.serializeJson({ devDependencies: { 'jest-preset-angular': '7.0.0' } }));
        initialTree.overwrite('workspace.json', workspace_1.serializeJson({
            projects: {
                'angular-one': {
                    root: 'apps/angular-one/',
                    architect: {
                        test: {
                            builder: '@nrwl/jest:jest',
                            options: {
                                jestConfig: 'apps/angular-one/jest.config.js'
                            }
                        }
                    }
                },
                'angular-two': {
                    root: 'apps/angular-two/',
                    architect: {
                        test: {
                            builder: '@nrwl/jest:jest',
                            options: {
                                jestConfig: 'apps/angular-two/jest.config.js'
                            }
                        }
                    }
                },
                'non-angular-one': {
                    root: 'apps/non-angular-one/',
                    architect: {
                        test: {
                            builder: '@nrwl/jest:jest',
                            options: {
                                jestConfig: 'apps/non-angular-one/jest.config.js'
                            }
                        }
                    }
                }
            }
        }));
        initialTree.create('apps/angular-one/jest.config.js', `module.exports = {
        name: 'angular-one',
        preset: '../../jest.config.js',
        coverageDirectory:
            '../../coverage/apps/angular-one',
        snapshotSerializers: [
            'jest-preset-angular/AngularSnapshotSerializer.js',
            'jest-preset-angular/HTMLCommentSerializer.js'
        ]
      };`);
        initialTree.create('apps/angular-two/jest.config.js', `module.exports = {
        name: 'angular-two',
        preset: '../../jest.config.js',
        coverageDirectory:
            '../../coverage/apps/angular-two',
        snapshotSerializers: [
            'jest-preset-angular/AngularSnapshotSerializer.js',
            'jest-preset-angular/HTMLCommentSerializer.js'
        ]
      };`);
        initialTree.create('apps/non-angular-one/jest.config.js', `module.exports = {
        name: 'non-angular-one',
        preset: '../../jest.config.js',
        coverageDirectory:
            '../../coverage/apps/non-angular-one',
        moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'html']
      };`);
    }));
    it('should update jest-preset-angular to 8.0.0', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield schematicRunner
            .runSchematicAsync('update-9.0.0', {}, initialTree)
            .toPromise();
        const { devDependencies } = ast_utils_1.readJsonInTree(result, 'package.json');
        expect(devDependencies['jest-preset-angular']).toEqual('8.0.0');
    }));
    it(`it should add '/build' into jest-preset-angular snapshotSerializers in any jest.config.js where it exists`, () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield schematicRunner
            .runSchematicAsync('update-9.0.0', {}, initialTree)
            .toPromise();
        const updateJestAngularOne = result.readContent('apps/angular-one/jest.config.js');
        const updateJestAngularTwo = result.readContent('apps/angular-two/jest.config.js');
        const updateJestNonAngularOne = result.readContent('apps/non-angular-one/jest.config.js');
        expect(updateJestAngularOne).not.toContain('jest-preset-angular/AngularSnapshotSerializer.js');
        expect(updateJestAngularOne).not.toContain('jest-preset-angular/HTMLCommentSerializer.js');
        expect(updateJestAngularTwo).not.toContain('jest-preset-angular/AngularSnapshotSerializer.js');
        expect(updateJestAngularTwo).not.toContain('jest-preset-angular/HTMLCommentSerializer.js');
        expect(updateJestAngularOne).toContain('jest-preset-angular/build/AngularNoNgAttributesSnapshotSerializer.js');
        expect(updateJestAngularOne).toContain('jest-preset-angular/build/AngularSnapshotSerializer.js');
        expect(updateJestAngularOne).toContain('jest-preset-angular/build/HTMLCommentSerializer.js');
        expect(updateJestAngularTwo).toContain('jest-preset-angular/build/AngularNoNgAttributesSnapshotSerializer.js');
        expect(updateJestAngularTwo).toContain('jest-preset-angular/build/AngularSnapshotSerializer.js');
        expect(updateJestAngularTwo).toContain('jest-preset-angular/build/HTMLCommentSerializer.js');
        expect(updateJestNonAngularOne).not.toContain('jest-preset-angular/build/AngularNoNgAttributesSnapshotSerializer.js');
        expect(updateJestNonAngularOne).not.toContain('jest-preset-angular/build/AngularSnapshotSerializer.js');
        expect(updateJestNonAngularOne).not.toContain('jest-preset-angular/build/HTMLCommentSerializer.js');
    }));
});
