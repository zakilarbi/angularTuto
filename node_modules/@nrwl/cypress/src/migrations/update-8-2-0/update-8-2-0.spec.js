"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@nrwl/workspace/testing");
const testing_2 = require("../../utils/testing");
const workspace_1 = require("@nrwl/workspace");
describe('Update 8.2.0', () => {
    let initialTree;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        initialTree = testing_1.createEmptyWorkspace(schematics_1.Tree.empty());
        initialTree = yield testing_2.callRule(schematics_1.chain([
            workspace_1.updateWorkspace(workspace => {
                workspace.projects.add({
                    root: 'project',
                    name: 'proejct',
                    targets: {
                        e2e: {
                            builder: '@nrwl/cypress:cypress',
                            options: {
                                cypressConfig: 'project/cypress.json',
                                tsConfig: 'project/tsconfig.e2e.json',
                                devServerTarget: 'project:serve'
                            },
                            configurations: {
                                production: {
                                    cypressConfig: 'project/cypress.prod.json',
                                    tsConfig: 'project/tsconfig.e2e.json',
                                    devServerTarget: 'project:serve:production'
                                }
                            }
                        }
                    }
                });
            }),
            workspace_1.updateJsonInTree('project/cypress.json', () => ({
                fileServerFolder: '../dist/out-tsc/project',
                fixturesFolder: '../dist/out-tsc/project/src/fixtures',
                integrationFolder: '../dist/out-tsc/project/src/integration',
                pluginsFile: '../dist/out-tsc/project/src/plugins/index.js',
                supportFile: false,
                video: true,
                videosFolder: '../dist/out-tsc/project/videos',
                screenshotsFolder: '../dist/out-tsc/project/screenshots'
            })),
            workspace_1.updateJsonInTree('project/cypress.prod.json', () => ({
                fileServerFolder: '../dist/out-tsc/project',
                fixturesFolder: '../dist/out-tsc/project/src/fixtures',
                integrationFolder: '../dist/out-tsc/project/src/integration',
                pluginsFile: '../dist/out-tsc/project/src/plugins/index.js',
                supportFile: false,
                video: true,
                videosFolder: '../dist/out-tsc/project/videos',
                screenshotsFolder: '../dist/out-tsc/project/screenshots',
                baseUrl: 'https://www.example.com'
            })),
            workspace_1.updateJsonInTree('project/tsconfig.e2e.json', () => ({
                extends: '../tsconfig.json',
                compilerOptions: {
                    outDir: '../dist/out-tsc'
                },
                include: ['**/*']
            })),
            workspace_1.updateJsonInTree('tsconfig.json', () => ({
                compilerOptions: {
                    rootDir: '.'
                }
            })),
            host => {
                host.create('project/src/plugins/index.ts', `
              import * as mod from 'module';

              // ***********************************************************
              // This example plugins/index.js can be used to load plugins
              //
              // You can change the location of this file or turn off loading
              // the plugins file with the 'pluginsFile' configuration option.
              //
              // You can read more here:
              // https://on.cypress.io/plugins-guide
              // ***********************************************************
              
              // This function is called when a project is opened or re-opened (e.g. due to
              // the project's config changing)
              
              module.exports = (on: Cypress.Actions, config: Cypress.ConfigOptions) => {
                console.log(mod);
                // \`on\` is used to hook into various events Cypress emits
                // \`config\` is the resolved Cypress config
              };

            `);
            }
        ]), initialTree);
    }));
    it('should update cypress configs', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield testing_2.runMigration('update-8.2.0', {}, initialTree);
        expect(workspace_1.readJsonInTree(result, 'project/cypress.json')).toEqual({
            fileServerFolder: './',
            fixturesFolder: './src/fixtures',
            integrationFolder: './src/integration',
            pluginsFile: './src/plugins/index.js',
            supportFile: false,
            video: true,
            videosFolder: '../dist/out-tsc/project/videos',
            screenshotsFolder: '../dist/out-tsc/project/screenshots'
        });
        expect(workspace_1.readJsonInTree(result, 'project/cypress.prod.json')).toEqual({
            fileServerFolder: './',
            fixturesFolder: './src/fixtures',
            integrationFolder: './src/integration',
            pluginsFile: './src/plugins/index.js',
            supportFile: false,
            video: true,
            videosFolder: '../dist/out-tsc/project/videos',
            screenshotsFolder: '../dist/out-tsc/project/screenshots',
            baseUrl: 'https://www.example.com'
        });
    }));
    it('should transpile plugin files', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield testing_2.runMigration('update-8.2.0', {}, initialTree);
        const newPluginsFile = result.readContent('project/src/plugins/index.js');
        expect(newPluginsFile).toContain('module.exports = function(on, config) {');
        expect(newPluginsFile).toContain(`const { preprocessTypescript } = require('@nrwl/cypress/plugins/preprocessor');`);
        expect(newPluginsFile).toContain(`var mod = require('module');`);
        expect(newPluginsFile).toContain(`on('file:preprocessor', preprocessTypescript(config));`);
    }));
});
