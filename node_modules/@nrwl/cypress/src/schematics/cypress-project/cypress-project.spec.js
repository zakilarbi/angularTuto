"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@nrwl/workspace/testing");
const testing_2 = require("../../utils/testing");
const workspace_1 = require("@nrwl/workspace");
describe('schematic:cypress-project', () => {
    let appTree;
    beforeEach(() => {
        appTree = schematics_1.Tree.empty();
        appTree = testing_1.createEmptyWorkspace(appTree);
    });
    describe('Cypress Project', () => {
        it('should generate files', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('cypress-project', { name: 'my-app-e2e', project: 'my-app' }, appTree);
            expect(tree.exists('apps/my-app-e2e/cypress.json')).toBeTruthy();
            expect(tree.exists('apps/my-app-e2e/tsconfig.e2e.json')).toBeTruthy();
            expect(tree.exists('apps/my-app-e2e/src/fixtures/example.json')).toBeTruthy();
            expect(tree.exists('apps/my-app-e2e/src/integration/app.spec.ts')).toBeTruthy();
            expect(tree.exists('apps/my-app-e2e/src/plugins/index.js')).toBeTruthy();
            expect(tree.exists('apps/my-app-e2e/src/support/app.po.ts')).toBeTruthy();
            expect(tree.exists('apps/my-app-e2e/src/support/commands.ts')).toBeTruthy();
            expect(tree.exists('apps/my-app-e2e/src/support/index.ts')).toBeTruthy();
        }));
        it('should add update `workspace.json` file', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('cypress-project', { name: 'my-app-e2e', project: 'my-app', linter: "tslint" /* TsLint */ }, appTree);
            const workspaceJson = workspace_1.readJsonInTree(tree, 'workspace.json');
            const project = workspaceJson.projects['my-app-e2e'];
            expect(project.root).toEqual('apps/my-app-e2e');
            expect(project.architect.lint).toEqual({
                builder: '@angular-devkit/build-angular:tslint',
                options: {
                    tsConfig: ['apps/my-app-e2e/tsconfig.e2e.json'],
                    exclude: ['**/node_modules/**', '!apps/my-app-e2e/**']
                }
            });
            expect(project.architect.e2e).toEqual({
                builder: '@nrwl/cypress:cypress',
                options: {
                    cypressConfig: 'apps/my-app-e2e/cypress.json',
                    devServerTarget: 'my-app:serve',
                    tsConfig: 'apps/my-app-e2e/tsconfig.e2e.json'
                },
                configurations: {
                    production: {
                        devServerTarget: 'my-app:serve:production'
                    }
                }
            });
        }));
        it('should add update `workspace.json` file properly when eslint is passed', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('cypress-project', { name: 'my-app-e2e', project: 'my-app', linter: "eslint" /* EsLint */ }, appTree);
            const workspaceJson = workspace_1.readJsonInTree(tree, 'workspace.json');
            const project = workspaceJson.projects['my-app-e2e'];
            expect(project.architect.lint).toEqual({
                builder: '@nrwl/linter:lint',
                options: {
                    linter: 'eslint',
                    config: 'apps/my-app-e2e/.eslintrc',
                    tsConfig: ['apps/my-app-e2e/tsconfig.e2e.json'],
                    exclude: ['**/node_modules/**', '!apps/my-app-e2e/**']
                }
            });
        }));
        it('should update nx.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('cypress-project', { name: 'my-app-e2e', project: 'my-app', linter: "eslint" /* EsLint */ }, appTree);
            const nxJson = workspace_1.readJsonInTree(tree, 'nx.json');
            expect(nxJson.projects['my-app-e2e']).toEqual({
                tags: [],
                implicitDependencies: ['my-app']
            });
        }));
        it('should set right path names in `cypress.json`', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('cypress-project', { name: 'my-app-e2e', project: 'my-app' }, appTree);
            const cypressJson = workspace_1.readJsonInTree(tree, 'apps/my-app-e2e/cypress.json');
            expect(cypressJson).toEqual({
                fileServerFolder: '.',
                fixturesFolder: './src/fixtures',
                integrationFolder: './src/integration',
                modifyObstructiveCode: false,
                pluginsFile: './src/plugins/index',
                supportFile: './src/support/index.ts',
                video: true,
                videosFolder: '../../dist/cypress/apps/my-app-e2e/videos',
                screenshotsFolder: '../../dist/cypress/apps/my-app-e2e/screenshots',
                chromeWebSecurity: false
            });
        }));
        it('should set right path names in `tsconfig.e2e.json`', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('cypress-project', { name: 'my-app-e2e', project: 'my-app' }, appTree);
            const tsconfigJson = workspace_1.readJsonInTree(tree, 'apps/my-app-e2e/tsconfig.e2e.json');
            expect(tsconfigJson.extends).toEqual('./tsconfig.json');
            expect(tsconfigJson.compilerOptions.outDir).toEqual('../../dist/out-tsc');
        }));
        describe('nested', () => {
            it('should update workspace.json', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_2.runSchematic('cypress-project', {
                    name: 'my-app-e2e',
                    project: 'my-dir-my-app',
                    directory: 'my-dir',
                    linter: "tslint" /* TsLint */
                }, appTree);
                const projectConfig = workspace_1.readJsonInTree(tree, 'workspace.json').projects['my-dir-my-app-e2e'];
                expect(projectConfig).toBeDefined();
                expect(projectConfig.architect.lint).toEqual({
                    builder: '@angular-devkit/build-angular:tslint',
                    options: {
                        tsConfig: ['apps/my-dir/my-app-e2e/tsconfig.e2e.json'],
                        exclude: ['**/node_modules/**', '!apps/my-dir/my-app-e2e/**']
                    }
                });
                expect(projectConfig.architect.e2e).toEqual({
                    builder: '@nrwl/cypress:cypress',
                    options: {
                        cypressConfig: 'apps/my-dir/my-app-e2e/cypress.json',
                        devServerTarget: 'my-dir-my-app:serve',
                        tsConfig: 'apps/my-dir/my-app-e2e/tsconfig.e2e.json'
                    },
                    configurations: {
                        production: {
                            devServerTarget: 'my-dir-my-app:serve:production'
                        }
                    }
                });
            }));
            it('should set right path names in `cypress.json`', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_2.runSchematic('cypress-project', { name: 'my-app-e2e', project: 'my-dir-my-app', directory: 'my-dir' }, appTree);
                const cypressJson = workspace_1.readJsonInTree(tree, 'apps/my-dir/my-app-e2e/cypress.json');
                expect(cypressJson).toEqual({
                    fileServerFolder: '.',
                    fixturesFolder: './src/fixtures',
                    integrationFolder: './src/integration',
                    modifyObstructiveCode: false,
                    pluginsFile: './src/plugins/index',
                    supportFile: './src/support/index.ts',
                    video: true,
                    videosFolder: '../../../dist/cypress/apps/my-dir/my-app-e2e/videos',
                    screenshotsFolder: '../../../dist/cypress/apps/my-dir/my-app-e2e/screenshots',
                    chromeWebSecurity: false
                });
            }));
            it('should set right path names in `tsconfig.e2e.json`', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_2.runSchematic('cypress-project', { name: 'my-app-e2e', project: 'my-dir-my-app', directory: 'my-dir' }, appTree);
                const tsconfigJson = workspace_1.readJsonInTree(tree, 'apps/my-dir/my-app-e2e/tsconfig.e2e.json');
                expect(tsconfigJson.compilerOptions.outDir).toEqual('../../../dist/out-tsc');
            }));
        });
    });
});
