"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
// app
const workspace_1 = require("@nrwl/workspace");
const workspace_2 = require("@nrwl/workspace");
const workspace_3 = require("@nrwl/workspace");
const to_js_1 = require("@nrwl/workspace/src/utils/rules/to-js");
function generateFiles(options) {
    return () => {
        // host.delete(`${options.projectRoot}/tsconfig.e2e.json`);
        return schematics_1.mergeWith(schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.template(Object.assign(Object.assign({ tmpl: '' }, options), { ext: options.js ? 'js' : 'ts', offsetFromRoot: workspace_2.offsetFromRoot(options.projectRoot) })),
            schematics_1.move(options.projectRoot),
            options.js ? to_js_1.toJS() : schematics_1.noop()
        ]));
    };
}
function updateNxJson(options) {
    return workspace_1.updateJsonInTree('nx.json', json => {
        json.projects[options.projectName] = {
            tags: [],
            implicitDependencies: [options.project]
        };
        return json;
    });
}
function updateWorkspaceJson(options) {
    return workspace_1.updateWorkspaceInTree(json => {
        const architect = {};
        architect.e2e = {
            builder: '@nrwl/cypress:cypress',
            options: {
                cypressConfig: core_1.join(core_1.normalize(options.projectRoot), 'cypress.json'),
                tsConfig: core_1.join(core_1.normalize(options.projectRoot), 'tsconfig.e2e.json'),
                devServerTarget: `${options.project}:serve`
            },
            configurations: {
                production: {
                    devServerTarget: `${options.project}:serve:production`
                }
            }
        };
        architect.lint = workspace_1.generateProjectLint(core_1.normalize(options.projectRoot), core_1.join(core_1.normalize(options.projectRoot), 'tsconfig.e2e.json'), options.linter);
        json.projects[options.projectName] = {
            root: options.projectRoot,
            sourceRoot: core_1.join(core_1.normalize(options.projectRoot), 'src'),
            projectType: 'application',
            architect
        };
        return json;
    });
}
function default_1(options) {
    options = normalizeOptions(options);
    return schematics_1.chain([
        workspace_1.addLintFiles(options.projectRoot, options.linter),
        generateFiles(options),
        updateWorkspaceJson(options),
        updateNxJson(options)
    ]);
}
exports.default = default_1;
function normalizeOptions(options) {
    const projectName = options.directory
        ? workspace_3.toFileName(options.directory) + '-' + options.name
        : options.name;
    const projectRoot = options.directory
        ? core_1.join(core_1.normalize('apps'), workspace_3.toFileName(options.directory), options.name)
        : core_1.join(core_1.normalize('apps'), options.name);
    return Object.assign(Object.assign({}, options), { projectName,
        projectRoot });
}
