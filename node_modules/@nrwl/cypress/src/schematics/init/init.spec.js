"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const testing_1 = require("@nrwl/workspace/testing");
const testing_2 = require("../../utils/testing");
const versions_1 = require("../../utils/versions");
describe('init', () => {
    let appTree;
    beforeEach(() => {
        appTree = schematics_1.Tree.empty();
        appTree = testing_1.createEmptyWorkspace(appTree);
    });
    it('should add dependencies into `package.json` file', () => __awaiter(void 0, void 0, void 0, function* () {
        const existing = 'existing';
        const existingVersion = '1.0.0';
        yield testing_2.callRule(workspace_1.addDepsToPackageJson({ '@nrwl/cypress': versions_1.cypressVersion, [existing]: existingVersion }, { [existing]: existingVersion }, false), appTree);
        const tree = yield testing_2.runSchematic('init', {}, appTree);
        const packageJson = workspace_1.readJsonInTree(tree, 'package.json');
        expect(packageJson.devDependencies.cypress).toBeDefined();
        expect(packageJson.devDependencies['@nrwl/cypress']).toBeDefined();
        expect(packageJson.devDependencies[existing]).toBeDefined();
        expect(packageJson.dependencies['@nrwl/cypress']).toBeUndefined();
        expect(packageJson.dependencies[existing]).toBeDefined();
    }));
});
