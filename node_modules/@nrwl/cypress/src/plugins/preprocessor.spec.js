"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const preprocessor_1 = require("./preprocessor");
jest.mock('@cypress/webpack-preprocessor', () => {
    return jest.fn(() => (...args) => Promise.resolve());
});
jest.mock('tsconfig-paths-webpack-plugin');
const wp = require("@cypress/webpack-preprocessor");
const tsconfig_paths_webpack_plugin_1 = require("tsconfig-paths-webpack-plugin");
describe('getWebpackConfig', () => {
    beforeEach(() => {
        tsconfig_paths_webpack_plugin_1.default.mockImplementation(function MockPathsPlugin() { });
    });
    it('should load typescript', () => {
        const config = preprocessor_1.getWebpackConfig({
            env: {
                tsConfig: './tsconfig.json'
            }
        });
        expect(config.module.rules).toContainEqual({
            test: /\.(j|t)sx?$/,
            loader: 'ts-loader',
            exclude: [/node_modules/],
            options: {
                configFile: './tsconfig.json',
                // https://github.com/TypeStrong/ts-loader/pull/685
                experimentalWatchApi: true,
                transpileOnly: true
            }
        });
    });
    it('should resolve tsconfig paths', () => {
        const config = preprocessor_1.getWebpackConfig({
            env: {
                tsConfig: './tsconfig.json'
            }
        });
        expect(config.resolve.plugins.some(plugin => plugin instanceof tsconfig_paths_webpack_plugin_1.default)).toEqual(true);
    });
    it('should resolve relevant extensions', () => {
        const config = preprocessor_1.getWebpackConfig({
            env: {
                tsConfig: './tsconfig.json'
            }
        });
        expect(config.resolve.extensions).toEqual([
            '.ts',
            '.tsx',
            '.mjs',
            '.js',
            '.jsx'
        ]);
    });
    it('should keep node_modules external', () => {
        const config = preprocessor_1.getWebpackConfig({
            env: {
                tsConfig: './tsconfig.json'
            }
        });
        const callback = jest.fn();
        config.externals[0](null, '@nestjs/core', callback);
        expect(callback).toHaveBeenCalledWith(null, 'commonjs @nestjs/core');
    });
});
describe('preprocessTypescript', () => {
    it('should work if no customizer is passed', () => __awaiter(void 0, void 0, void 0, function* () {
        const preprocessor = preprocessor_1.preprocessTypescript({
            env: {
                tsConfig: './tsconfig.json'
            }
        });
        yield preprocessor('arg0', 'arg1');
        expect(wp).toBeCalled();
        expect(wp.mock.calls[wp.mock.calls.length - 1][0].webpackOptions.resolve
            .extensions).toEqual(['.ts', '.tsx', '.mjs', '.js', '.jsx']);
    }));
    it('should support customizing the webpack config', () => __awaiter(void 0, void 0, void 0, function* () {
        const preprocessor = preprocessor_1.preprocessTypescript({
            env: {
                tsConfig: './tsconfig.json'
            }
        }, webpackConfig => {
            webpackConfig.resolve.extensions.push('.mdx');
            return webpackConfig;
        });
        yield preprocessor('arg0', 'arg1');
        expect(wp).toBeCalled();
        expect(wp.mock.calls[wp.mock.calls.length - 1][0].webpackOptions.resolve
            .extensions).toEqual(['.ts', '.tsx', '.mjs', '.js', '.jsx', '.mdx']);
    }));
});
