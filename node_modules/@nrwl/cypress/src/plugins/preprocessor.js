"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const wp = require("@cypress/webpack-preprocessor");
const tsconfig_paths_webpack_plugin_1 = require("tsconfig-paths-webpack-plugin");
const nodeExternals = require("webpack-node-externals");
const ForkTsCheckerWebpackPlugin = require("fork-ts-checker-webpack-plugin");
function preprocessTypescript(config, customizeWebpackConfig) {
    if (!config.env.tsConfig) {
        throw new Error('Please provide an absolute path to a tsconfig.json as cypressConfig.env.tsConfig');
    }
    return (...args) => __awaiter(this, void 0, void 0, function* () {
        const webpackOptions = customizeWebpackConfig
            ? customizeWebpackConfig(getWebpackConfig(config))
            : getWebpackConfig(config);
        return wp({ webpackOptions })(...args);
    });
}
exports.preprocessTypescript = preprocessTypescript;
function getWebpackConfig(config) {
    const extensions = ['.ts', '.tsx', '.mjs', '.js', '.jsx'];
    return {
        resolve: {
            extensions,
            plugins: [
                new tsconfig_paths_webpack_plugin_1.TsconfigPathsPlugin({
                    configFile: config.env.tsConfig,
                    extensions
                })
            ]
        },
        module: {
            rules: [
                {
                    test: /\.(j|t)sx?$/,
                    loader: 'ts-loader',
                    exclude: [/node_modules/],
                    options: {
                        configFile: config.env.tsConfig,
                        // https://github.com/TypeStrong/ts-loader/pull/685
                        experimentalWatchApi: true,
                        transpileOnly: true
                    }
                }
            ]
        },
        plugins: [
            new ForkTsCheckerWebpackPlugin({
                tsconfig: config.env.tsConfig,
                useTypescriptIncrementalApi: false
            })
        ],
        externals: [nodeExternals()]
    };
}
exports.getWebpackConfig = getWebpackConfig;
