"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const router_1 = require("@angular/router");
const testing_2 = require("@angular/router/testing");
const effects_1 = require("@ngrx/effects");
const testing_3 = require("@ngrx/effects/testing");
const router_store_1 = require("@ngrx/router-store");
const store_1 = require("@ngrx/store");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const index_1 = require("../index");
const testing_4 = require("../testing");
// reducers
function todosReducer(state, action) {
    if (action.type === 'TODO_LOADED') {
        return { selected: action.payload };
    }
    else {
        return state;
    }
}
function userReducer() {
    return 'bob';
}
let RootCmp = class RootCmp {
};
RootCmp = __decorate([
    core_1.Component({
        template: `
    ROOT[<router-outlet></router-outlet>]
  `
    })
], RootCmp);
let TodoComponent = class TodoComponent {
    constructor(store) {
        this.store = store;
        this.todo = this.store.select('todos', 'selected');
    }
};
TodoComponent = __decorate([
    core_1.Component({
        template: `
    Todo [
    <div *ngIf="todo | async as t">ID {{ t.id }} User {{ t.user }}</div>
    ]
  `
    }),
    __metadata("design:paramtypes", [store_1.Store])
], TodoComponent);
describe('DataPersistence', () => {
    describe('navigation', () => {
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                declarations: [RootCmp, TodoComponent],
                imports: [
                    store_1.StoreModule.forRoot({ todos: todosReducer, user: userReducer }, {
                        runtimeChecks: {
                            strictStateImmutability: false,
                            strictStateSerializability: false
                        }
                    }),
                    router_store_1.StoreRouterConnectingModule.forRoot({
                        serializer: router_store_1.DefaultRouterStateSerializer
                    }),
                    testing_2.RouterTestingModule.withRoutes([
                        { path: 'todo/:id', component: TodoComponent }
                    ]),
                    index_1.NxModule.forRoot()
                ]
            });
        });
        describe('successful navigation', () => {
            let TodoEffects = class TodoEffects {
                constructor(s) {
                    this.s = s;
                    this.loadTodo = this.s.navigation(TodoComponent, {
                        run: (a, state) => {
                            return {
                                type: 'TODO_LOADED',
                                payload: { id: a.params['id'], user: state.user }
                            };
                        },
                        onError: () => null
                    });
                }
            };
            __decorate([
                effects_1.Effect(),
                __metadata("design:type", Object)
            ], TodoEffects.prototype, "loadTodo", void 0);
            TodoEffects = __decorate([
                core_1.Injectable(),
                __metadata("design:paramtypes", [index_1.DataPersistence])
            ], TodoEffects);
            beforeEach(() => {
                testing_1.TestBed.configureTestingModule({
                    imports: [effects_1.EffectsModule.forRoot([TodoEffects])]
                });
            });
            it('should work', testing_1.fakeAsync(() => {
                const root = testing_1.TestBed.createComponent(RootCmp);
                const router = testing_1.TestBed.get(router_1.Router);
                router.navigateByUrl('/todo/123');
                testing_1.tick(0);
                root.detectChanges(false);
                expect(root.elementRef.nativeElement.innerHTML).toContain('ID 123');
                expect(root.elementRef.nativeElement.innerHTML).toContain('User bob');
            }));
        });
        describe('`run` throwing an error', () => {
            let TodoEffects = class TodoEffects {
                constructor(s) {
                    this.s = s;
                    this.loadTodo = this.s.navigation(TodoComponent, {
                        run: (a, state) => {
                            if (a.params['id'] === '123') {
                                throw new Error('boom');
                            }
                            else {
                                return {
                                    type: 'TODO_LOADED',
                                    payload: { id: a.params['id'], user: state.user }
                                };
                            }
                        },
                        onError: (a, e) => ({ type: 'ERROR', payload: { error: e } })
                    });
                }
            };
            __decorate([
                effects_1.Effect(),
                __metadata("design:type", Object)
            ], TodoEffects.prototype, "loadTodo", void 0);
            TodoEffects = __decorate([
                core_1.Injectable(),
                __metadata("design:paramtypes", [index_1.DataPersistence])
            ], TodoEffects);
            beforeEach(() => {
                testing_1.TestBed.configureTestingModule({
                    imports: [effects_1.EffectsModule.forRoot([TodoEffects])]
                });
            });
            it('should work', testing_1.fakeAsync(() => {
                const root = testing_1.TestBed.createComponent(RootCmp);
                const router = testing_1.TestBed.get(router_1.Router);
                let actions = [];
                testing_1.TestBed.get(effects_1.Actions).subscribe((a) => actions.push(a));
                router.navigateByUrl('/todo/123');
                testing_1.tick(0);
                root.detectChanges(false);
                expect(root.elementRef.nativeElement.innerHTML).not.toContain('ID 123');
                expect(actions.map(a => a.type)).toContain('ERROR');
                expect(actions.find(a => a.type === 'ERROR').payload.error.message).toEqual('boom');
                // can recover after an error
                router.navigateByUrl('/todo/456');
                testing_1.tick(0);
                root.detectChanges(false);
                expect(root.elementRef.nativeElement.innerHTML).toContain('ID 456');
            }));
        });
        describe('`run` returning an error observable', () => {
            let TodoEffects = class TodoEffects {
                constructor(s) {
                    this.s = s;
                    this.loadTodo = this.s.navigation(TodoComponent, {
                        run: (a, state) => {
                            if (a.params['id'] === '123') {
                                return rxjs_1.throwError('boom');
                            }
                            else {
                                return {
                                    type: 'TODO_LOADED',
                                    payload: { id: a.params['id'], user: state.user }
                                };
                            }
                        },
                        onError: (a, e) => ({ type: 'ERROR', payload: { error: e } })
                    });
                }
            };
            __decorate([
                effects_1.Effect(),
                __metadata("design:type", Object)
            ], TodoEffects.prototype, "loadTodo", void 0);
            TodoEffects = __decorate([
                core_1.Injectable(),
                __metadata("design:paramtypes", [index_1.DataPersistence])
            ], TodoEffects);
            beforeEach(() => {
                testing_1.TestBed.configureTestingModule({
                    imports: [effects_1.EffectsModule.forRoot([TodoEffects])]
                });
            });
            it('should work', testing_1.fakeAsync(() => {
                const root = testing_1.TestBed.createComponent(RootCmp);
                const router = testing_1.TestBed.get(router_1.Router);
                let actions = [];
                testing_1.TestBed.get(effects_1.Actions).subscribe((a) => actions.push(a));
                router.navigateByUrl('/todo/123');
                testing_1.tick(0);
                root.detectChanges(false);
                expect(root.elementRef.nativeElement.innerHTML).not.toContain('ID 123');
                expect(actions.map(a => a.type)).toContain('ERROR');
                expect(actions.find(a => a.type === 'ERROR').payload.error).toEqual('boom');
                router.navigateByUrl('/todo/456');
                testing_1.tick(0);
                root.detectChanges(false);
                expect(root.elementRef.nativeElement.innerHTML).toContain('ID 456');
            }));
        });
    });
    describe('fetch', () => {
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({ providers: [index_1.DataPersistence] });
        });
        describe('no id', () => {
            let TodoEffects = class TodoEffects {
                constructor(s) {
                    this.s = s;
                    this.loadTodos = this.s.fetch('GET_TODOS', {
                        run: (a, state) => {
                            // we need to introduce the delay to "enable" switchMap
                            return rxjs_1.of({
                                type: 'TODOS',
                                payload: { user: state.user, todos: 'some todos' }
                            }).pipe(operators_1.delay(1));
                        },
                        onError: () => null
                    });
                    this.loadTodosWithOperator = this.s.actions.pipe(effects_1.ofType('GET_TODOS'), operators_1.withLatestFrom(this.s.store), index_1.fetch({
                        run: (action, state) => {
                            return rxjs_1.of({
                                type: 'TODOS',
                                payload: { user: state.user, todos: 'some todos' }
                            }).pipe(operators_1.delay(1));
                        }
                    }));
                }
            };
            __decorate([
                effects_1.Effect(),
                __metadata("design:type", Object)
            ], TodoEffects.prototype, "loadTodos", void 0);
            __decorate([
                effects_1.Effect(),
                __metadata("design:type", Object)
            ], TodoEffects.prototype, "loadTodosWithOperator", void 0);
            TodoEffects = __decorate([
                core_1.Injectable(),
                __metadata("design:paramtypes", [index_1.DataPersistence])
            ], TodoEffects);
            function userReducer() {
                return 'bob';
            }
            let actions;
            beforeEach(() => {
                actions = new rxjs_1.Subject();
                testing_1.TestBed.configureTestingModule({
                    providers: [TodoEffects, testing_3.provideMockActions(() => actions)],
                    imports: [
                        store_1.StoreModule.forRoot({ user: userReducer }, {
                            runtimeChecks: {
                                strictStateImmutability: false,
                                strictStateSerializability: false
                            }
                        })
                    ]
                });
            });
            it('should work', (done) => __awaiter(void 0, void 0, void 0, function* () {
                actions = rxjs_1.of({ type: 'GET_TODOS', payload: {} }, { type: 'GET_TODOS', payload: {} });
                expect(yield testing_4.readAll(testing_1.TestBed.get(TodoEffects).loadTodos)).toEqual([
                    { type: 'TODOS', payload: { user: 'bob', todos: 'some todos' } },
                    { type: 'TODOS', payload: { user: 'bob', todos: 'some todos' } }
                ]);
                done();
            }));
            it('should work with an operator', (done) => __awaiter(void 0, void 0, void 0, function* () {
                actions = rxjs_1.of({ type: 'GET_TODOS', payload: {} }, { type: 'GET_TODOS', payload: {} });
                expect(yield testing_4.readAll(testing_1.TestBed.get(TodoEffects).loadTodosWithOperator)).toEqual([
                    { type: 'TODOS', payload: { user: 'bob', todos: 'some todos' } },
                    { type: 'TODOS', payload: { user: 'bob', todos: 'some todos' } }
                ]);
                done();
            }));
        });
        describe('id', () => {
            let TodoEffects = class TodoEffects {
                constructor(s) {
                    this.s = s;
                    this.loadTodo = this.s.fetch('GET_TODO', {
                        id: a => a.payload.id,
                        run: a => rxjs_1.of({ type: 'TODO', payload: a.payload }).pipe(operators_1.delay(1)),
                        onError: () => null
                    });
                }
            };
            __decorate([
                effects_1.Effect(),
                __metadata("design:type", Object)
            ], TodoEffects.prototype, "loadTodo", void 0);
            TodoEffects = __decorate([
                core_1.Injectable(),
                __metadata("design:paramtypes", [index_1.DataPersistence])
            ], TodoEffects);
            function userReducer() {
                return 'bob';
            }
            let actions;
            beforeEach(() => {
                actions = new rxjs_1.Subject();
                testing_1.TestBed.configureTestingModule({
                    providers: [TodoEffects, testing_3.provideMockActions(() => actions)],
                    imports: [
                        store_1.StoreModule.forRoot({ user: userReducer }, {
                            runtimeChecks: {
                                strictStateImmutability: false,
                                strictStateSerializability: false
                            }
                        })
                    ]
                });
            });
            it('should work', (done) => __awaiter(void 0, void 0, void 0, function* () {
                actions = rxjs_1.of({ type: 'GET_TODO', payload: { id: 1, value: '1' } }, { type: 'GET_TODO', payload: { id: 2, value: '2a' } }, { type: 'GET_TODO', payload: { id: 2, value: '2b' } });
                expect(yield testing_4.readAll(testing_1.TestBed.get(TodoEffects).loadTodo)).toEqual([
                    { type: 'TODO', payload: { id: 1, value: '1' } },
                    { type: 'TODO', payload: { id: 2, value: '2b' } }
                ]);
                done();
            }));
        });
    });
    describe('pessimisticUpdate', () => {
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({ providers: [index_1.DataPersistence] });
        });
        describe('successful', () => {
            let TodoEffects = class TodoEffects {
                constructor(s) {
                    this.s = s;
                    this.loadTodo = this.s.pessimisticUpdate('UPDATE_TODO', {
                        run: (a, state) => ({
                            type: 'TODO_UPDATED',
                            payload: { user: state.user, newTitle: a.payload.newTitle }
                        }),
                        onError: () => null
                    });
                    this.loadTodoWithOperator = this.s.actions.pipe(effects_1.ofType('UPDATE_TODO'), operators_1.withLatestFrom(this.s.store), index_1.pessimisticUpdate({
                        run: (a, state) => ({
                            type: 'TODO_UPDATED',
                            payload: { user: state.user, newTitle: a.payload.newTitle }
                        }),
                        onError: () => null
                    }));
                }
            };
            __decorate([
                effects_1.Effect(),
                __metadata("design:type", Object)
            ], TodoEffects.prototype, "loadTodo", void 0);
            __decorate([
                effects_1.Effect(),
                __metadata("design:type", Object)
            ], TodoEffects.prototype, "loadTodoWithOperator", void 0);
            TodoEffects = __decorate([
                core_1.Injectable(),
                __metadata("design:paramtypes", [index_1.DataPersistence])
            ], TodoEffects);
            function userReducer() {
                return 'bob';
            }
            let actions;
            beforeEach(() => {
                actions = new rxjs_1.Subject();
                testing_1.TestBed.configureTestingModule({
                    providers: [TodoEffects, testing_3.provideMockActions(() => actions)],
                    imports: [
                        store_1.StoreModule.forRoot({ user: userReducer }, {
                            runtimeChecks: {
                                strictStateImmutability: false,
                                strictStateSerializability: false
                            }
                        })
                    ]
                });
            });
            it('should work', (done) => __awaiter(void 0, void 0, void 0, function* () {
                actions = rxjs_1.of({
                    type: 'UPDATE_TODO',
                    payload: { newTitle: 'newTitle' }
                });
                expect(yield testing_4.readAll(testing_1.TestBed.get(TodoEffects).loadTodo)).toEqual([
                    {
                        type: 'TODO_UPDATED',
                        payload: { user: 'bob', newTitle: 'newTitle' }
                    }
                ]);
                done();
            }));
            it('should work with an operator', (done) => __awaiter(void 0, void 0, void 0, function* () {
                actions = rxjs_1.of({
                    type: 'UPDATE_TODO',
                    payload: { newTitle: 'newTitle' }
                });
                expect(yield testing_4.readAll(testing_1.TestBed.get(TodoEffects).loadTodoWithOperator)).toEqual([
                    {
                        type: 'TODO_UPDATED',
                        payload: { user: 'bob', newTitle: 'newTitle' }
                    }
                ]);
                done();
            }));
        });
        describe('`run` throws an error', () => {
            let TodoEffects = class TodoEffects {
                constructor(s) {
                    this.s = s;
                    this.loadTodo = this.s.pessimisticUpdate('UPDATE_TODO', {
                        run: () => {
                            throw new Error('boom');
                        },
                        onError: (a, e) => ({
                            type: 'ERROR',
                            payload: { error: e }
                        })
                    });
                }
            };
            __decorate([
                effects_1.Effect(),
                __metadata("design:type", Object)
            ], TodoEffects.prototype, "loadTodo", void 0);
            TodoEffects = __decorate([
                core_1.Injectable(),
                __metadata("design:paramtypes", [index_1.DataPersistence])
            ], TodoEffects);
            function userReducer() {
                return 'bob';
            }
            let actions;
            beforeEach(() => {
                actions = new rxjs_1.Subject();
                testing_1.TestBed.configureTestingModule({
                    providers: [TodoEffects, testing_3.provideMockActions(() => actions)],
                    imports: [
                        store_1.StoreModule.forRoot({ user: userReducer }, {
                            runtimeChecks: {
                                strictStateImmutability: false,
                                strictStateSerializability: false
                            }
                        })
                    ]
                });
            });
            it('should work', (done) => __awaiter(void 0, void 0, void 0, function* () {
                actions = rxjs_1.of({
                    type: 'UPDATE_TODO',
                    payload: { newTitle: 'newTitle' }
                });
                const [a] = yield testing_4.readAll(testing_1.TestBed.get(TodoEffects).loadTodo);
                expect(a.type).toEqual('ERROR');
                expect(a.payload.error.message).toEqual('boom');
                done();
            }));
        });
        describe('`run` returns an observable that errors', () => {
            let TodoEffects = class TodoEffects {
                constructor(s) {
                    this.s = s;
                    this.loadTodo = this.s.pessimisticUpdate('UPDATE_TODO', {
                        run: () => {
                            return rxjs_1.throwError('boom');
                        },
                        onError: (a, e) => ({
                            type: 'ERROR',
                            payload: { error: e }
                        })
                    });
                }
            };
            __decorate([
                effects_1.Effect(),
                __metadata("design:type", Object)
            ], TodoEffects.prototype, "loadTodo", void 0);
            TodoEffects = __decorate([
                core_1.Injectable(),
                __metadata("design:paramtypes", [index_1.DataPersistence])
            ], TodoEffects);
            function userReducer() {
                return 'bob';
            }
            let actions;
            beforeEach(() => {
                actions = new rxjs_1.Subject();
                testing_1.TestBed.configureTestingModule({
                    providers: [TodoEffects, testing_3.provideMockActions(() => actions)],
                    imports: [
                        store_1.StoreModule.forRoot({ user: userReducer }, {
                            runtimeChecks: {
                                strictStateImmutability: false,
                                strictStateSerializability: false
                            }
                        })
                    ]
                });
            });
            it('should work', (done) => __awaiter(void 0, void 0, void 0, function* () {
                actions = rxjs_1.of({
                    type: 'UPDATE_TODO',
                    payload: { newTitle: 'newTitle' }
                });
                const [a] = yield testing_4.readAll(testing_1.TestBed.get(TodoEffects).loadTodo);
                expect(a.type).toEqual('ERROR');
                expect(a.payload.error).toEqual('boom');
                done();
            }));
        });
    });
    describe('optimisticUpdate', () => {
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({ providers: [index_1.DataPersistence] });
        });
        describe('`run` throws an error', () => {
            let TodoEffects = class TodoEffects {
                constructor(s) {
                    this.s = s;
                    this.loadTodo = this.s.optimisticUpdate('UPDATE_TODO', {
                        run: () => {
                            throw new Error('boom');
                        },
                        undoAction: a => ({
                            type: 'UNDO_UPDATE_TODO',
                            payload: a.payload
                        })
                    });
                    this.loadTodoWithOperator = this.s.actions.pipe(effects_1.ofType('UPDATE_TODO'), operators_1.withLatestFrom(this.s.store), index_1.optimisticUpdate({
                        run: () => {
                            throw new Error('boom');
                        },
                        undoAction: a => ({
                            type: 'UNDO_UPDATE_TODO',
                            payload: a.payload
                        })
                    }));
                }
            };
            __decorate([
                effects_1.Effect(),
                __metadata("design:type", Object)
            ], TodoEffects.prototype, "loadTodo", void 0);
            __decorate([
                effects_1.Effect(),
                __metadata("design:type", Object)
            ], TodoEffects.prototype, "loadTodoWithOperator", void 0);
            TodoEffects = __decorate([
                core_1.Injectable(),
                __metadata("design:paramtypes", [index_1.DataPersistence])
            ], TodoEffects);
            function userReducer() {
                return 'bob';
            }
            let actions;
            beforeEach(() => {
                actions = new rxjs_1.Subject();
                testing_1.TestBed.configureTestingModule({
                    providers: [TodoEffects, testing_3.provideMockActions(() => actions)],
                    imports: [
                        store_1.StoreModule.forRoot({ user: userReducer }, {
                            runtimeChecks: {
                                strictStateImmutability: false,
                                strictStateSerializability: false
                            }
                        })
                    ]
                });
            });
            it('should work', (done) => __awaiter(void 0, void 0, void 0, function* () {
                actions = rxjs_1.of({
                    type: 'UPDATE_TODO',
                    payload: { newTitle: 'newTitle' }
                });
                const [a] = yield testing_4.readAll(testing_1.TestBed.get(TodoEffects).loadTodo);
                expect(a.type).toEqual('UNDO_UPDATE_TODO');
                expect(a.payload.newTitle).toEqual('newTitle');
                done();
            }));
            it('should work with an operator', (done) => __awaiter(void 0, void 0, void 0, function* () {
                actions = rxjs_1.of({
                    type: 'UPDATE_TODO',
                    payload: { newTitle: 'newTitle' }
                });
                const [a] = yield testing_4.readAll(testing_1.TestBed.get(TodoEffects).loadTodoWithOperator);
                expect(a.type).toEqual('UNDO_UPDATE_TODO');
                expect(a.payload.newTitle).toEqual('newTitle');
                done();
            }));
        });
    });
});
