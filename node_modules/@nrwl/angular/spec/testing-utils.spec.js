"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const testing_utils_1 = require("../testing/src/testing-utils");
describe('TestingUtils', () => {
    describe('readAll', () => {
        it('should transform Observable<T> to Promise<Array<T>>', (done) => __awaiter(void 0, void 0, void 0, function* () {
            const obs = rxjs_1.from([1, 2, 3]);
            const result = yield testing_utils_1.readAll(obs);
            expect(result).toEqual([1, 2, 3]);
            done();
        }));
    });
    describe('readFirst', () => {
        it('should transform first item emitted from Observable<T> to Promise<T>', (done) => __awaiter(void 0, void 0, void 0, function* () {
            const obs = rxjs_1.from([1, 2, 3]);
            const result = yield testing_utils_1.readFirst(obs);
            expect(result).toBe(1);
            done();
        }));
    });
});
