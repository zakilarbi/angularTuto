"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ast_utils_1 = require("@nrwl/workspace/src/utils/ast-utils");
const typescript_1 = require("typescript");
const ast_utils_2 = require("./ast-utils");
describe('ast-utils', () => {
    describe('_addSymbolToNgModuleMetadata', () => {
        const moduleImport = `import { NgModule } from '@angular/core';`;
        const fileName = 'app.module.ts';
        const createTemplate = (content, close) => ({
            start: content.length,
            text: content + close
        });
        const createStockModule = (content) => typescript_1.createSourceFile(fileName, content, typescript_1.ScriptTarget.Latest, true);
        it('should add provider to module without existing providers', () => {
            const toAdd = 'MyProvider';
            const { start, text } = createTemplate(moduleImport + '@NgModule({', '})');
            const source = createStockModule(text);
            const change = ast_utils_2.addProviderToModule(source, fileName, toAdd);
            const expectedChange = [
                new ast_utils_1.InsertChange(fileName, start, `  providers: [${toAdd}]\n`)
            ];
            expect(change).toEqual(expectedChange);
        });
        it('should add provider to module with existing empty providers', () => {
            const toAdd = 'MyProvider';
            const { start, text } = createTemplate(moduleImport + '@NgModule({providers:[', ']})');
            const source = createStockModule(text);
            const change = ast_utils_2.addProviderToModule(source, fileName, toAdd);
            const expectedChange = [new ast_utils_1.InsertChange(fileName, start, toAdd)];
            expect(change).toEqual(expectedChange);
        });
        it('should add provider to module with existing providers', () => {
            const toAdd = 'MyProvider';
            let template = createTemplate(moduleImport + '@NgModule({providers:[ProviderOne,ProviderTwo', ']})');
            let source = createStockModule(template.text);
            let change = ast_utils_2.addProviderToModule(source, fileName, toAdd);
            let expectedChange = [
                new ast_utils_1.InsertChange(fileName, template.start, `, ${toAdd}`)
            ];
            expect(change).toEqual(expectedChange);
            template = createTemplate(moduleImport +
                '@NgModule({providers:[{provide:MyClass,useExisting:MyExistingClass}', ']})');
            source = createStockModule(template.text);
            change = ast_utils_2.addProviderToModule(source, fileName, toAdd);
            expectedChange = [
                new ast_utils_1.InsertChange(fileName, template.start, `, ${toAdd}`)
            ];
            expect(change).toEqual(expectedChange);
            template = createTemplate(moduleImport + '@NgModule({providers:[someCondition ? MyProvider : []', ']})');
            source = createStockModule(template.text);
            change = ast_utils_2.addProviderToModule(source, fileName, toAdd);
            expectedChange = [
                new ast_utils_1.InsertChange(fileName, template.start, `, ${toAdd}`)
            ];
            expect(change).toEqual(expectedChange);
            template = createTemplate(moduleImport +
                '@NgModule({providers:[[NestedProvider1, NestedProvider2]', ']})');
            source = createStockModule(template.text);
            change = ast_utils_2.addProviderToModule(source, fileName, toAdd);
            expectedChange = [
                new ast_utils_1.InsertChange(fileName, template.start, `, ${toAdd}`)
            ];
            expect(change).toEqual(expectedChange);
            template = createTemplate(moduleImport + '@NgModule({providers:[...ExistingProviders', ']})');
            source = createStockModule(template.text);
            change = ast_utils_2.addProviderToModule(source, fileName, toAdd);
            expectedChange = [
                new ast_utils_1.InsertChange(fileName, template.start, `, ${toAdd}`)
            ];
            expect(change).toEqual(expectedChange);
        });
    });
});
