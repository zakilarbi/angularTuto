"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@nrwl/workspace/testing");
const testing_2 = require("../../utils/testing");
const workspace_1 = require("@nrwl/workspace");
describe('downgrade-module', () => {
    let appTree;
    beforeEach(() => {
        appTree = schematics_1.Tree.empty();
        appTree = testing_1.createEmptyWorkspace(appTree);
        appTree = testing_2.createApp(appTree, 'myapp');
    });
    it('should update main.ts', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_2.runSchematic('downgrade-module', {
            name: 'legacy',
            project: 'myapp'
        }, appTree);
        const main = testing_1.getFileContent(tree, '/apps/myapp/src/main.ts');
        expect(main).toContain('downgradeModule(bootstrapAngular)');
        expect(main).toContain(`import 'legacy';`);
        expect(main).toContain(`angular.bootstrap(document, ['legacy', downgraded.name]);`);
    }));
    it('should update module', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_2.runSchematic('downgrade-module', {
            name: 'legacy',
            project: 'myapp'
        }, appTree);
        const appModule = testing_1.getFileContent(tree, 'apps/myapp/src/app/app.module.ts');
        expect(appModule).not.toContain('bootstrap:');
        expect(appModule).toContain('entryComponents: [AppComponent]');
        expect(appModule).toContain('ngDoBootstrap');
    }));
    it('should update package.json by default', () => __awaiter(void 0, void 0, void 0, function* () {
        appTree.overwrite(`/package.json`, JSON.stringify({
            dependencies: {
                '@angular/core': '4.4.4'
            }
        }));
        const tree = yield testing_2.runSchematic('downgrade-module', {
            name: 'legacy',
            project: 'myapp'
        }, appTree);
        const packageJson = workspace_1.readJsonInTree(tree, '/package.json');
        expect(packageJson.dependencies['@angular/upgrade']).toEqual('4.4.4');
        expect(packageJson.dependencies['angular']).toBeDefined();
    }));
    it('should not package.json when --skipPackageJson=true', () => __awaiter(void 0, void 0, void 0, function* () {
        appTree.overwrite(`/package.json`, JSON.stringify({
            dependencies: {
                '@angular/core': '4.4.4'
            }
        }));
        const tree = yield testing_2.runSchematic('downgrade-module', {
            name: 'legacy',
            skipPackageJson: true,
            project: 'myapp'
        }, appTree);
        const packageJson = workspace_1.readJsonInTree(tree, 'package.json');
        expect(packageJson.dependencies['@angular/upgrade']).not.toBeDefined();
    }));
    it('should support custom angularJsImport', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_2.runSchematic('downgrade-module', {
            name: 'legacy',
            angularJsImport: 'legacy-app',
            project: 'myapp'
        }, appTree);
        const main = testing_1.getFileContent(tree, '/apps/myapp/src/main.ts');
        expect(main).toContain(`import 'legacy-app';`);
        expect(main).not.toContain(`import 'legacy';`);
    }));
});
