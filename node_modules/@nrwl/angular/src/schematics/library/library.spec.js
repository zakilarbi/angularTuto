"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@nrwl/workspace/testing");
const testing_2 = require("../../utils/testing");
const stripJsonComments = require("strip-json-comments");
const workspace_1 = require("@nrwl/workspace");
const literals_1 = require("@angular-devkit/core/src/utils/literals");
describe('lib', () => {
    let appTree;
    beforeEach(() => {
        appTree = schematics_1.Tree.empty();
        appTree = testing_1.createEmptyWorkspace(appTree);
    });
    describe('not nested', () => {
        it('should update ng-package.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const publishableTree = yield testing_2.runSchematic('lib', { name: 'myLib', framework: 'angular', publishable: true }, appTree);
            let ngPackage = workspace_1.readJsonInTree(publishableTree, 'libs/my-lib/ng-package.json');
            expect(ngPackage.dest).toEqual('../../dist/libs/my-lib');
        }));
        it('should update ng-package.json $schema to the correct folder', () => __awaiter(void 0, void 0, void 0, function* () {
            const publishableTree = yield testing_2.runSchematic('lib', { name: 'myLib', framework: 'angular', publishable: true }, appTree);
            let ngPackage = workspace_1.readJsonInTree(publishableTree, 'libs/my-lib/ng-package.json');
            expect(ngPackage.$schema).toEqual('../../node_modules/ng-packagr/ng-package.schema.json');
        }));
        it('should not update package.json by default', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib' }, appTree);
            const packageJson = workspace_1.readJsonInTree(tree, '/package.json');
            expect(packageJson.devDependencies['ng-packagr']).toBeUndefined();
        }));
        it('should update package.json when publishable', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib', framework: 'angular', publishable: true }, appTree);
            const packageJson = workspace_1.readJsonInTree(tree, '/package.json');
            expect(packageJson.devDependencies['ng-packagr']).toBeDefined();
        }));
        it("should update npmScope of lib's package.json when publishable", () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib', framework: 'angular', publishable: true }, appTree);
            const packageJson = workspace_1.readJsonInTree(tree, '/libs/my-lib/package.json');
            expect(packageJson.name).toEqual('@proj/my-lib');
        }));
        it("should update npmScope of lib's package.json when publishable", () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib', publishable: true, prefix: 'lib' }, appTree);
            const packageJson = workspace_1.readJsonInTree(tree, '/libs/my-lib/package.json');
            expect(packageJson.name).toEqual('@proj/my-lib');
        }));
        it('should update workspace.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib', framework: 'angular', publishable: true }, appTree);
            const workspaceJson = workspace_1.readJsonInTree(tree, '/workspace.json');
            expect(workspaceJson.projects['my-lib'].root).toEqual('libs/my-lib');
            expect(workspaceJson.projects['my-lib'].architect.build).toBeDefined();
            expect(workspaceJson.projects['my-lib'].architect.lint.options.tsConfig).toEqual([
                'libs/my-lib/tsconfig.lib.json',
                'libs/my-lib/tsconfig.spec.json'
            ]);
            expect(workspaceJson.projects['my-lib'].architect.lint.options.exclude).toEqual(['**/node_modules/**', '!libs/my-lib/**']);
        }));
        it('should remove "build" target from workspace.json when a library is not publishable', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib', publishable: false }, appTree);
            const workspaceJson = workspace_1.readJsonInTree(tree, '/workspace.json');
            expect(workspaceJson.projects['my-lib'].root).toEqual('libs/my-lib');
            expect(workspaceJson.projects['my-lib'].architect.build).not.toBeDefined();
        }));
        it('should remove tsconfib.lib.prod.json when library is not publishable', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib', publishable: false }, appTree);
            const libProdConfig = tree.read('libs/my-lib/tsconfig.lib.prod.json');
            expect(libProdConfig).toBeFalsy();
        }));
        it('should update nx.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib', tags: 'one,two' }, appTree);
            const nxJson = workspace_1.readJsonInTree(tree, '/nx.json');
            expect(nxJson.projects).toEqual({
                'my-lib': {
                    tags: ['one', 'two']
                }
            });
        }));
        it('should update root tsconfig.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib' }, appTree);
            const tsconfigJson = workspace_1.readJsonInTree(tree, '/tsconfig.json');
            expect(tsconfigJson.compilerOptions.paths['@proj/my-lib']).toEqual([
                'libs/my-lib/src/index.ts'
            ]);
        }));
        it('should create a local tsconfig.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib' }, appTree);
            const tsconfigJson = workspace_1.readJsonInTree(tree, 'libs/my-lib/tsconfig.json');
            expect(tsconfigJson).toEqual({
                extends: '../../tsconfig.json',
                compilerOptions: {
                    types: ['node', 'jest']
                },
                include: ['**/*.ts']
            });
        }));
        it('should extend the local tsconfig.json with tsconfig.spec.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib' }, appTree);
            const tsconfigJson = workspace_1.readJsonInTree(tree, 'libs/my-lib/tsconfig.spec.json');
            expect(tsconfigJson.extends).toEqual('./tsconfig.json');
        }));
        describe('when creating the tsconfig.lib.json', () => {
            it('should extend the local tsconfig.json', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_2.runSchematic('lib', { name: 'myLib' }, appTree);
                const tsconfigJson = workspace_1.readJsonInTree(tree, 'libs/my-lib/tsconfig.lib.json');
                expect(tsconfigJson.extends).toEqual('./tsconfig.json');
            }));
            it('should exclude the test setup file when unitTestRunner is jest', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_2.runSchematic('lib', { name: 'myLib', unitTestRunner: 'jest' }, appTree);
                const tsconfigJson = workspace_1.readJsonInTree(tree, 'libs/my-lib/tsconfig.lib.json');
                expect(tsconfigJson.exclude).toEqual([
                    'src/test-setup.ts',
                    '**/*.spec.ts'
                ]);
            }));
            it('should leave the excludes alone when unitTestRunner is karma', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_2.runSchematic('lib', { name: 'myLib', unitTestRunner: 'karma' }, appTree);
                const tsconfigJson = workspace_1.readJsonInTree(tree, 'libs/my-lib/tsconfig.lib.json');
                expect(tsconfigJson.exclude).toEqual(['src/test.ts', '**/*.spec.ts']);
            }));
            it('should remove the excludes when unitTestRunner is none', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_2.runSchematic('lib', { name: 'myLib', unitTestRunner: 'none' }, appTree);
                const tsconfigJson = workspace_1.readJsonInTree(tree, 'libs/my-lib/tsconfig.lib.json');
                expect(tsconfigJson.exclude).toEqual([]);
            }));
        });
        it('should generate files', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib', framework: 'angular' }, appTree);
            expect(tree.exists(`libs/my-lib/jest.config.js`)).toBeTruthy();
            expect(tree.exists('libs/my-lib/src/index.ts')).toBeTruthy();
            expect(tree.exists('libs/my-lib/src/lib/my-lib.module.ts')).toBeTruthy();
            expect(tree.exists('libs/my-lib/src/lib/my-lib.component.ts')).toBeFalsy();
            expect(tree.exists('libs/my-lib/src/lib/my-lib.component.spec.ts')).toBeFalsy();
            expect(tree.exists('libs/my-lib/src/lib/my-lib.service.ts')).toBeFalsy();
            expect(tree.exists('libs/my-lib/src/lib/my-lib.service.spec.ts')).toBeFalsy();
            const tree2 = yield testing_2.runSchematic('lib', { name: 'myLib2', framework: 'angular', simpleModuleName: true }, tree);
            expect(tree2.exists(`libs/my-lib2/jest.config.js`)).toBeTruthy();
            expect(tree2.exists('libs/my-lib2/src/index.ts')).toBeTruthy();
            expect(tree2.exists('libs/my-lib2/src/lib/my-lib2.module.ts')).toBeTruthy();
            expect(tree.exists('libs/my-lib2/src/lib/my-lib2.component.ts')).toBeFalsy();
            expect(tree.exists('libs/my-lib2/src/lib/my-lib2.component.spec.ts')).toBeFalsy();
            expect(tree2.exists('libs/my-lib2/src/lib/my-lib2.service.ts')).toBeFalsy();
            expect(tree2.exists('libs/my-lib2/src/lib/my-lib2.service.spec.ts')).toBeFalsy();
        }));
        it('should default the prefix to npmScope', () => __awaiter(void 0, void 0, void 0, function* () {
            const noPrefix = yield testing_2.runSchematic('lib', { name: 'myLib' }, appTree);
            expect(JSON.parse(noPrefix.read('workspace.json').toString()).projects['my-lib'].prefix).toEqual('proj');
            const withPrefix = yield testing_2.runSchematic('lib', { name: 'myLib', prefix: 'custom' }, appTree);
            expect(JSON.parse(withPrefix.read('workspace.json').toString()).projects['my-lib'].prefix).toEqual('custom');
        }));
        describe('--framework', () => {
            describe('none', () => {
                let tree;
                beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
                    tree = yield testing_2.runSchematic('lib', {
                        name: 'myLib',
                        framework: 'none'
                    }, appTree);
                }));
                it('should generate a basic typescript lib', () => {
                    expect(tree.exists('libs/my-dir/my-lib/src/lib/my-dir-my-lib.module.ts')).toEqual(false);
                    expect(tree.exists('libs/my-dir/my-lib/src/lib/my-dir-my-lib.module.spec.ts')).toEqual(false);
                });
            });
        });
    });
    describe('nested', () => {
        it('should update nx.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', {
                name: 'myLib',
                directory: 'myDir',
                framework: 'angular',
                tags: 'one'
            }, appTree);
            const nxJson = workspace_1.readJsonInTree(tree, '/nx.json');
            expect(nxJson.projects).toEqual({
                'my-dir-my-lib': {
                    tags: ['one']
                }
            });
            const tree2 = yield testing_2.runSchematic('lib', {
                name: 'myLib2',
                directory: 'myDir',
                framework: 'angular',
                tags: 'one,two',
                simpleModuleName: true
            }, tree);
            const nxJson2 = workspace_1.readJsonInTree(tree2, '/nx.json');
            expect(nxJson2.projects).toEqual({
                'my-dir-my-lib': {
                    tags: ['one']
                },
                'my-dir-my-lib2': {
                    tags: ['one', 'two']
                }
            });
        }));
        it('should generate files', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib', directory: 'myDir', framework: 'angular' }, appTree);
            expect(tree.exists(`libs/my-dir/my-lib/jest.config.js`)).toBeTruthy();
            expect(tree.exists('libs/my-dir/my-lib/src/index.ts')).toBeTruthy();
            expect(tree.exists('libs/my-dir/my-lib/src/lib/my-dir-my-lib.module.ts')).toBeTruthy();
            expect(tree.exists('libs/my-dir/my-lib/src/lib/my-lib.component.ts')).toBeFalsy();
            expect(tree.exists('libs/my-dir/my-lib/src/lib/my-lib.component.spec.ts')).toBeFalsy();
            expect(tree.exists('libs/my-dir/my-lib/src/lib/my-lib.service.ts')).toBeFalsy();
            expect(tree.exists('libs/my-dir/my-lib/src/lib/my-lib.service.spec.ts')).toBeFalsy();
            const tree2 = yield testing_2.runSchematic('lib', {
                name: 'myLib2',
                directory: 'myDir',
                framework: 'angular',
                simpleModuleName: true
            }, tree);
            expect(tree2.exists(`libs/my-dir/my-lib2/jest.config.js`)).toBeTruthy();
            expect(tree2.exists('libs/my-dir/my-lib2/src/index.ts')).toBeTruthy();
            expect(tree2.exists('libs/my-dir/my-lib2/src/lib/my-lib2.module.ts')).toBeTruthy();
            expect(tree2.exists('libs/my-dir/my-lib2/src/lib/my-lib2.component.ts')).toBeFalsy();
            expect(tree2.exists('libs/my-dir/my-lib2/src/lib/my-lib2.component.spec.ts')).toBeFalsy();
            expect(tree2.exists('libs/my-dir/my-lib2/src/lib/my-lib2.service.ts')).toBeFalsy();
            expect(tree2.exists('libs/my-dir/my-lib2/src/lib/my-lib2.service.spec.ts')).toBeFalsy();
        }));
        it('should update ng-package.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const publishableTree = yield testing_2.runSchematic('lib', {
                name: 'myLib',
                directory: 'myDir',
                framework: 'angular',
                publishable: true
            }, appTree);
            let ngPackage = workspace_1.readJsonInTree(publishableTree, 'libs/my-dir/my-lib/ng-package.json');
            expect(ngPackage.dest).toEqual('../../../dist/libs/my-dir/my-lib');
        }));
        it('should update workspace.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib', directory: 'myDir' }, appTree);
            const workspaceJson = workspace_1.readJsonInTree(tree, '/workspace.json');
            expect(workspaceJson.projects['my-dir-my-lib'].root).toEqual('libs/my-dir/my-lib');
            expect(workspaceJson.projects['my-dir-my-lib'].architect.lint.options.tsConfig).toEqual([
                'libs/my-dir/my-lib/tsconfig.lib.json',
                'libs/my-dir/my-lib/tsconfig.spec.json'
            ]);
            expect(workspaceJson.projects['my-dir-my-lib'].architect.lint.options.exclude).toEqual(['**/node_modules/**', '!libs/my-dir/my-lib/**']);
        }));
        it('should update tsconfig.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib', directory: 'myDir' }, appTree);
            const tsconfigJson = workspace_1.readJsonInTree(tree, '/tsconfig.json');
            expect(tsconfigJson.compilerOptions.paths['@proj/my-dir/my-lib']).toEqual(['libs/my-dir/my-lib/src/index.ts']);
            expect(tsconfigJson.compilerOptions.paths['my-dir-my-lib/*']).toBeUndefined();
        }));
        it('should create a local tsconfig.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_2.runSchematic('lib', { name: 'myLib', directory: 'myDir' }, appTree);
            const tsconfigJson = workspace_1.readJsonInTree(tree, 'libs/my-dir/my-lib/tsconfig.json');
            expect(tsconfigJson).toEqual({
                extends: '../../../tsconfig.json',
                compilerOptions: {
                    types: ['node', 'jest']
                },
                include: ['**/*.ts']
            });
        }));
    });
    describe('router', () => {
        it('should error when lazy is set without routing', () => __awaiter(void 0, void 0, void 0, function* () {
            try {
                yield testing_2.runSchematic('lib', { name: 'myLib', lazy: true }, appTree);
                fail();
            }
            catch (e) {
                expect(e.message).toEqual('routing must be set');
            }
        }));
        describe('lazy', () => {
            it('should add RouterModule.forChild', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_2.runSchematic('lib', {
                    name: 'myLib',
                    directory: 'myDir',
                    framework: 'angular',
                    routing: true,
                    lazy: true
                }, appTree);
                expect(tree.exists('libs/my-dir/my-lib/src/lib/my-dir-my-lib.module.ts')).toBeTruthy();
                expect(testing_1.getFileContent(tree, 'libs/my-dir/my-lib/src/lib/my-dir-my-lib.module.ts')).toContain('RouterModule.forChild');
                const tree2 = yield testing_2.runSchematic('lib', {
                    name: 'myLib2',
                    directory: 'myDir',
                    routing: true,
                    framework: 'angular',
                    lazy: true,
                    simpleModuleName: true
                }, tree);
                expect(tree2.exists('libs/my-dir/my-lib2/src/lib/my-lib2.module.ts')).toBeTruthy();
                expect(testing_1.getFileContent(tree2, 'libs/my-dir/my-lib2/src/lib/my-lib2.module.ts')).toContain('RouterModule.forChild');
            }));
            it('should update the parent module', () => __awaiter(void 0, void 0, void 0, function* () {
                appTree = testing_2.createApp(appTree, 'myapp');
                const tree = yield testing_2.runSchematic('lib', {
                    name: 'myLib',
                    directory: 'myDir',
                    routing: true,
                    lazy: true,
                    framework: 'angular',
                    parentModule: 'apps/myapp/src/app/app.module.ts'
                }, appTree);
                const moduleContents = testing_1.getFileContent(tree, 'apps/myapp/src/app/app.module.ts');
                expect(moduleContents).toContain('RouterModule.forRoot([');
                expect(moduleContents).toContain(`
      {
        path: 'my-dir-my-lib',
        loadChildren: () =>
          import('@proj/my-dir/my-lib').then(module => module.MyDirMyLibModule)
      }`);
                const tsConfigAppJson = JSON.parse(stripJsonComments(testing_1.getFileContent(tree, 'apps/myapp/tsconfig.app.json')));
                expect(tsConfigAppJson.include).toEqual([
                    '**/*.ts',
                    '../../libs/my-dir/my-lib/src/index.ts'
                ]);
                const tree2 = yield testing_2.runSchematic('lib', {
                    name: 'myLib2',
                    directory: 'myDir',
                    routing: true,
                    framework: 'angular',
                    lazy: true,
                    parentModule: 'apps/myapp/src/app/app.module.ts'
                }, tree);
                const moduleContents2 = testing_1.getFileContent(tree2, 'apps/myapp/src/app/app.module.ts');
                expect(moduleContents2).toContain('RouterModule.forRoot([');
                expect(moduleContents2).toContain(`
      {
        path: 'my-dir-my-lib',
        loadChildren: () =>
          import('@proj/my-dir/my-lib').then(module => module.MyDirMyLibModule)
      }`);
                expect(moduleContents2).toContain(`
      {
        path: 'my-dir-my-lib2',
        loadChildren: () =>
          import('@proj/my-dir/my-lib2').then(
            module => module.MyDirMyLib2Module
          )
      }`);
                const tsConfigAppJson2 = JSON.parse(stripJsonComments(testing_1.getFileContent(tree2, 'apps/myapp/tsconfig.app.json')));
                expect(tsConfigAppJson2.include).toEqual([
                    '**/*.ts',
                    '../../libs/my-dir/my-lib/src/index.ts',
                    '../../libs/my-dir/my-lib2/src/index.ts'
                ]);
                const tree3 = yield testing_2.runSchematic('lib', {
                    name: 'myLib3',
                    directory: 'myDir',
                    routing: true,
                    framework: 'angular',
                    lazy: true,
                    parentModule: 'apps/myapp/src/app/app.module.ts',
                    simpleModuleName: true
                }, tree2);
                const moduleContents3 = testing_1.getFileContent(tree3, 'apps/myapp/src/app/app.module.ts');
                expect(moduleContents3).toContain('RouterModule.forRoot([');
                expect(moduleContents3).toContain(`
      {
        path: 'my-dir-my-lib',
        loadChildren: () =>
          import('@proj/my-dir/my-lib').then(module => module.MyDirMyLibModule)
      }`);
                expect(moduleContents3).toContain(`
      {
        path: 'my-dir-my-lib2',
        loadChildren: () =>
          import('@proj/my-dir/my-lib2').then(
            module => module.MyDirMyLib2Module
          )
      }`);
                expect(moduleContents3).toContain(`
      {
        path: 'my-lib3',
        loadChildren: () =>
          import('@proj/my-dir/my-lib3').then(module => module.MyLib3Module)
      }`);
                const tsConfigAppJson3 = JSON.parse(stripJsonComments(testing_1.getFileContent(tree3, 'apps/myapp/tsconfig.app.json')));
                expect(tsConfigAppJson3.include).toEqual([
                    '**/*.ts',
                    '../../libs/my-dir/my-lib/src/index.ts',
                    '../../libs/my-dir/my-lib2/src/index.ts',
                    '../../libs/my-dir/my-lib3/src/index.ts'
                ]);
            }));
            it('should update the parent module even if the route is declared outside the .forRoot(...)', () => __awaiter(void 0, void 0, void 0, function* () {
                appTree = testing_2.createApp(appTree, 'myapp');
                appTree.overwrite('apps/myapp/src/app/app.module.ts', `
          import { NgModule } from '@angular/core';
          import { BrowserModule } from '@angular/platform-browser';
          import { RouterModule } from '@angular/router';
          import { AppComponent } from './app.component';

          const routes = [];

          @NgModule({
            imports: [BrowserModule, RouterModule.forRoot(routes)],
            declarations: [AppComponent],
            bootstrap: [AppComponent]
          })
          export class AppModule {}
        `);
                const tree = yield testing_2.runSchematic('lib', {
                    name: 'myLib',
                    directory: 'myDir',
                    routing: true,
                    lazy: true,
                    framework: 'angular',
                    parentModule: 'apps/myapp/src/app/app.module.ts'
                }, appTree);
                const moduleContents = testing_1.getFileContent(tree, 'apps/myapp/src/app/app.module.ts');
                expect(moduleContents).toContain('RouterModule.forRoot(routes)');
                expect(moduleContents).toContain(literals_1.stripIndent `
        const routes = [
          {
            path: 'my-dir-my-lib',
            loadChildren: () =>
              import('@proj/my-dir/my-lib').then(module => module.MyDirMyLibModule)
          }
        ];`);
            }));
        });
        describe('eager', () => {
            it('should add RouterModule and define an array of routes', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_2.runSchematic('lib', {
                    name: 'myLib',
                    directory: 'myDir',
                    framework: 'angular',
                    routing: true
                }, appTree);
                expect(tree.exists('libs/my-dir/my-lib/src/lib/my-dir-my-lib.module.ts')).toBeTruthy();
                expect(testing_1.getFileContent(tree, 'libs/my-dir/my-lib/src/lib/my-dir-my-lib.module.ts')).toContain('RouterModule');
                expect(testing_1.getFileContent(tree, 'libs/my-dir/my-lib/src/lib/my-dir-my-lib.module.ts')).toContain('const myDirMyLibRoutes: Route[] = ');
                const tree2 = yield testing_2.runSchematic('lib', {
                    name: 'myLib2',
                    directory: 'myDir',
                    routing: true,
                    framework: 'angular',
                    simpleModuleName: true
                }, tree);
                expect(tree2.exists('libs/my-dir/my-lib2/src/lib/my-lib2.module.ts')).toBeTruthy();
                expect(testing_1.getFileContent(tree2, 'libs/my-dir/my-lib2/src/lib/my-lib2.module.ts')).toContain('RouterModule');
                expect(testing_1.getFileContent(tree2, 'libs/my-dir/my-lib2/src/lib/my-lib2.module.ts')).toContain('const myLib2Routes: Route[] = ');
            }));
            it('should update the parent module', () => __awaiter(void 0, void 0, void 0, function* () {
                appTree = testing_2.createApp(appTree, 'myapp');
                const tree = yield testing_2.runSchematic('lib', {
                    name: 'myLib',
                    directory: 'myDir',
                    routing: true,
                    framework: 'angular',
                    parentModule: 'apps/myapp/src/app/app.module.ts'
                }, appTree);
                const moduleContents = testing_1.getFileContent(tree, 'apps/myapp/src/app/app.module.ts');
                expect(moduleContents).toContain('MyDirMyLibModule');
                expect(moduleContents).toContain('RouterModule.forRoot([');
                expect(moduleContents).toContain("{ path: 'my-dir-my-lib', children: myDirMyLibRoutes }");
                const tree2 = yield testing_2.runSchematic('lib', {
                    name: 'myLib2',
                    directory: 'myDir',
                    routing: true,
                    framework: 'angular',
                    parentModule: 'apps/myapp/src/app/app.module.ts'
                }, tree);
                const moduleContents2 = testing_1.getFileContent(tree2, 'apps/myapp/src/app/app.module.ts');
                expect(moduleContents2).toContain('MyDirMyLib2Module');
                expect(moduleContents2).toContain('RouterModule.forRoot([');
                expect(moduleContents2).toContain("{ path: 'my-dir-my-lib', children: myDirMyLibRoutes }");
                expect(moduleContents2).toContain("{ path: 'my-dir-my-lib2', children: myDirMyLib2Routes }");
                const tree3 = yield testing_2.runSchematic('lib', {
                    name: 'myLib3',
                    directory: 'myDir',
                    routing: true,
                    framework: 'angular',
                    parentModule: 'apps/myapp/src/app/app.module.ts',
                    simpleModuleName: true
                }, tree2);
                const moduleContents3 = testing_1.getFileContent(tree3, 'apps/myapp/src/app/app.module.ts');
                expect(moduleContents3).toContain('MyLib3Module');
                expect(moduleContents3).toContain('RouterModule.forRoot([');
                expect(moduleContents3).toContain("{ path: 'my-dir-my-lib', children: myDirMyLibRoutes }");
                expect(moduleContents3).toContain("{ path: 'my-dir-my-lib2', children: myDirMyLib2Routes }");
                expect(moduleContents3).toContain("{ path: 'my-lib3', children: myLib3Routes }");
            }));
            it('should update the parent module even if the route is declared outside the .forRoot(...)', () => __awaiter(void 0, void 0, void 0, function* () {
                appTree = testing_2.createApp(appTree, 'myapp');
                appTree.overwrite('apps/myapp/src/app/app.module.ts', `
          import { NgModule } from '@angular/core';
          import { BrowserModule } from '@angular/platform-browser';
          import { RouterModule } from '@angular/router';
          import { AppComponent } from './app.component';

          const routes = [];

          @NgModule({
            imports: [BrowserModule, RouterModule.forRoot(routes)],
            declarations: [AppComponent],
            bootstrap: [AppComponent]
          })
          export class AppModule {}
        `);
                const tree = yield testing_2.runSchematic('lib', {
                    name: 'myLib',
                    directory: 'myDir',
                    routing: true,
                    framework: 'angular',
                    parentModule: 'apps/myapp/src/app/app.module.ts'
                }, appTree);
                const moduleContents = testing_1.getFileContent(tree, 'apps/myapp/src/app/app.module.ts');
                expect(moduleContents).toContain('RouterModule.forRoot(routes)');
                expect(moduleContents).toContain(`const routes = [{ path: 'my-dir-my-lib', children: myDirMyLibRoutes }];`);
            }));
        });
    });
    describe('--style scss', () => {
        it('should set it as default', () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield testing_2.runSchematic('lib', { name: 'myLib', style: 'scss' }, appTree);
            const workspaceJson = workspace_1.readJsonInTree(result, 'workspace.json');
            expect(workspaceJson.projects['my-lib'].schematics).toEqual({
                '@nrwl/angular:component': {
                    style: 'scss'
                }
            });
        }));
    });
    describe('--unit-test-runner karma', () => {
        it('should generate karma configuration', () => __awaiter(void 0, void 0, void 0, function* () {
            const resultTree = yield testing_2.runSchematic('lib', { name: 'myLib', unitTestRunner: 'karma' }, appTree);
            expect(resultTree.exists('libs/my-lib/src/test.ts')).toBeTruthy();
            expect(resultTree.exists('libs/my-lib/src/test-setup.ts')).toBeFalsy();
            expect(resultTree.exists('libs/my-lib/tsconfig.spec.json')).toBeTruthy();
            expect(resultTree.exists('libs/my-lib/karma.conf.js')).toBeTruthy();
            expect(resultTree.exists('karma.conf.js')).toBeTruthy();
            const workspaceJson = workspace_1.readJsonInTree(resultTree, 'workspace.json');
            expect(workspaceJson.projects['my-lib'].architect.test.builder).toEqual('@angular-devkit/build-angular:karma');
            expect(workspaceJson.projects['my-lib'].architect.lint.options.tsConfig).toEqual([
                'libs/my-lib/tsconfig.lib.json',
                'libs/my-lib/tsconfig.spec.json'
            ]);
            expect(workspaceJson.projects['my-lib'].architect.lint.options.exclude).toEqual(['**/node_modules/**', '!libs/my-lib/**']);
        }));
    });
    describe('--unit-test-runner none', () => {
        it('should not generate test configuration', () => __awaiter(void 0, void 0, void 0, function* () {
            const resultTree = yield testing_2.runSchematic('lib', { name: 'myLib', unitTestRunner: 'none' }, appTree);
            expect(resultTree.exists('libs/my-lib/src/lib/my-lib.module.spec.ts')).toBeFalsy();
            expect(resultTree.exists('libs/my-lib/src/test.ts')).toBeFalsy();
            expect(resultTree.exists('libs/my-lib/src/test.ts')).toBeFalsy();
            expect(resultTree.exists('libs/my-lib/tsconfig.spec.json')).toBeFalsy();
            expect(resultTree.exists('libs/my-lib/jest.config.js')).toBeFalsy();
            expect(resultTree.exists('libs/my-lib/karma.conf.js')).toBeFalsy();
            const workspaceJson = workspace_1.readJsonInTree(resultTree, 'workspace.json');
            expect(workspaceJson.projects['my-lib'].architect.test).toBeUndefined();
            expect(workspaceJson.projects['my-lib'].architect.lint.options.tsConfig).toEqual(['libs/my-lib/tsconfig.lib.json']);
        }));
    });
});
