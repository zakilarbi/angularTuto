"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("../../utils/testing");
const testing_2 = require("@nrwl/workspace/testing");
describe('schematic:stories', () => {
    let appTree;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        appTree = yield createTestUILib('test-ui-lib');
    }));
    describe('Storybook stories', () => {
        it('should generate stories.ts files', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield testing_1.runSchematic('stories', { name: 'test-ui-lib', generateCypressSpecs: false }, appTree);
            expect(tree.exists('libs/test-ui-lib/src/lib/test-button/test-button.component.stories.ts')).toBeTruthy();
            expect(tree.exists('libs/test-ui-lib/src/lib/test-other/test-other.component.stories.ts')).toBeTruthy();
            expect(tree.exists('libs/test-ui-lib/src/lib/nested/nested-button/nested-button.component.stories.ts')).toBeTruthy();
            const propLines = [
                `buttonType: text('buttonType', 'button'),`,
                `style: text('style', 'default'),`,
                `age: number('age', ''),`,
                `isOn: boolean('isOn', false),    `
            ];
            const storyContent = tree.readContent('libs/test-ui-lib/src/lib/test-button/test-button.component.stories.ts');
            propLines.forEach(propLine => {
                storyContent.includes(propLine);
            });
        }));
        it('should generate cypress spec files', () => __awaiter(void 0, void 0, void 0, function* () {
            let tree = yield testing_1.runExternalSchematic('@nrwl/storybook', 'cypress-project', { name: 'test-ui-lib' }, appTree);
            tree = yield testing_1.runSchematic('stories', { name: 'test-ui-lib', generateCypressSpecs: true }, tree);
            expect(tree.exists('libs/test-ui-lib/src/lib/test-button/test-button.component.stories.ts')).toBeTruthy();
            expect(tree.exists('libs/test-ui-lib/src/lib/test-other/test-other.component.stories.ts')).toBeTruthy();
            const propLines = [
                `buttonType: text('buttonType', 'button'),`,
                `style: text('style', 'default'),`,
                `age: number('age', ''),`,
                `isOn: boolean('isOn', false),    `
            ];
            const storyContent = tree.readContent('libs/test-ui-lib/src/lib/test-button/test-button.component.stories.ts');
            propLines.forEach(propLine => {
                storyContent.includes(propLine);
            });
            expect(tree.exists('apps/test-ui-lib-e2e/src/integration/test-button/test-button.component.spec.ts')).toBeTruthy();
            expect(tree.exists('apps/test-ui-lib-e2e/src/integration/test-other/test-other.component.spec.ts')).toBeTruthy();
        }));
        it('should run twice without errors', () => __awaiter(void 0, void 0, void 0, function* () {
            let tree = yield testing_1.runExternalSchematic('@nrwl/storybook', 'cypress-project', { name: 'test-ui-lib' }, appTree);
            tree = yield testing_1.runSchematic('stories', { name: 'test-ui-lib', generateCypressSpecs: false }, tree);
            tree = yield testing_1.runSchematic('stories', { name: 'test-ui-lib', generateCypressSpecs: true }, tree);
        }));
    });
});
function createTestUILib(libName) {
    return __awaiter(this, void 0, void 0, function* () {
        let appTree = schematics_1.Tree.empty();
        appTree = testing_2.createEmptyWorkspace(appTree);
        appTree = yield testing_1.callRule(schematics_1.externalSchematic('@nrwl/angular', 'library', {
            name: libName
        }), appTree);
        appTree = yield testing_1.callRule(schematics_1.externalSchematic('@schematics/angular', 'component', {
            name: 'test-button',
            project: libName
        }), appTree);
        const modulePath = `libs/${libName}/src/lib/${libName}.module.ts`;
        appTree.overwrite(modulePath, `import * as ButtonExports from './test-button/test-button.component';
    ${appTree.read(modulePath)}`);
        appTree = yield testing_1.callRule(schematics_1.externalSchematic('@schematics/angular', 'module', {
            name: 'nested',
            project: libName,
            path: `libs/${libName}/src/lib`
        }), appTree);
        appTree = yield testing_1.callRule(schematics_1.externalSchematic('@schematics/angular', 'component', {
            name: 'nested-button',
            project: libName,
            module: 'nested',
            path: `libs/${libName}/src/lib/nested`
        }), appTree);
        appTree.overwrite(`libs/${libName}/src/lib/test-button/test-button.component.ts`, `
import { Component, OnInit, Input } from '@angular/core';

export type ButtonStyle = 'default' | 'primary' | 'accent';

@Component({
  selector: 'proj-test-button',
  templateUrl: './test-button.component.html',
  styleUrls: ['./test-button.component.css']
})
export class TestButtonComponent implements OnInit {
  @Input('buttonType') type = 'button';
  @Input() style: ButtonStyle = 'default';
  @Input() age: number;
  @Input() isOn = false;

  constructor() { }

  ngOnInit() {
  }

}
`);
        appTree.overwrite(`libs/${libName}/src/lib/test-button/test-button.component.html`, `<button [attr.type]="type" [ngClass]="style"></button>`);
        appTree = yield testing_1.callRule(schematics_1.externalSchematic('@schematics/angular', 'component', {
            name: 'test-other',
            project: libName
        }), appTree);
        return appTree;
    });
}
exports.createTestUILib = createTestUILib;
