"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@nrwl/workspace/testing");
const testing_2 = require("../../utils/testing");
const workspace_1 = require("@nrwl/workspace");
describe('karmaProject', () => {
    let appTree;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        appTree = schematics_1.Tree.empty();
        appTree = testing_1.createEmptyWorkspace(appTree);
        appTree = yield testing_2.runSchematic('lib', {
            name: 'lib1',
            unitTestRunner: 'none'
        }, appTree);
        appTree = yield testing_2.runSchematic('app', {
            name: 'app1',
            unitTestRunner: 'none'
        }, appTree);
    }));
    it('should generate files', () => __awaiter(void 0, void 0, void 0, function* () {
        const resultTree = yield testing_2.runSchematic('karma-project', {
            project: 'lib1'
        }, appTree);
        expect(resultTree.exists('/libs/lib1/karma.conf.js')).toBeTruthy();
        expect(resultTree.exists('/libs/lib1/tsconfig.spec.json')).toBeTruthy();
    }));
    it('should create a karma.conf.js', () => __awaiter(void 0, void 0, void 0, function* () {
        const resultTree = yield testing_2.runSchematic('karma-project', {
            project: 'lib1'
        }, appTree);
        expect(resultTree.readContent('libs/lib1/karma.conf.js'))
            .toBe(`// Karma configuration file, see link for more information
// https://karma-runner.github.io/1.0/config/configuration-file.html

const { join } = require('path');
const getBaseKarmaConfig = require('../../karma.conf');

module.exports = function(config) {
  const baseConfig = getBaseKarmaConfig();
  config.set({
    ...baseConfig,
    coverageIstanbulReporter: {
      ...baseConfig.coverageIstanbulReporter,
      dir: join(__dirname, '../../coverage/libs/lib1')
    }
  });
};
`);
    }));
    it('should update the local tsconfig.json', () => __awaiter(void 0, void 0, void 0, function* () {
        const resultTree = yield testing_2.runSchematic('karma-project', {
            project: 'lib1'
        }, appTree);
        const tsConfig = workspace_1.readJsonInTree(resultTree, 'libs/lib1/tsconfig.json');
        expect(tsConfig.compilerOptions.types).toContain('jasmine');
        expect(tsConfig.compilerOptions.types).not.toContain('node');
    }));
    describe('library', () => {
        it('should alter workspace.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const resultTree = yield testing_2.runSchematic('karma-project', {
                project: 'lib1'
            }, appTree);
            const workspaceJson = workspace_1.readJsonInTree(resultTree, 'workspace.json');
            expect(workspaceJson.projects.lib1.architect.test).toEqual({
                builder: '@angular-devkit/build-angular:karma',
                options: {
                    main: 'libs/lib1/src/test.ts',
                    tsConfig: 'libs/lib1/tsconfig.spec.json',
                    karmaConfig: 'libs/lib1/karma.conf.js'
                }
            });
            expect(workspaceJson.projects.lib1.architect.lint.options.tsConfig).toContain('libs/lib1/tsconfig.spec.json');
        }));
        it('should create a tsconfig.spec.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const resultTree = yield testing_2.runSchematic('karma-project', {
                project: 'lib1'
            }, appTree);
            const tsConfig = workspace_1.readJsonInTree(resultTree, 'libs/lib1/tsconfig.spec.json');
            expect(tsConfig).toEqual({
                extends: './tsconfig.json',
                compilerOptions: {
                    outDir: '../../dist/out-tsc',
                    types: ['jasmine', 'node']
                },
                files: ['src/test.ts'],
                include: ['**/*.spec.ts', '**/*.d.ts']
            });
        }));
        it('should create test.ts', () => __awaiter(void 0, void 0, void 0, function* () {
            const resultTree = yield testing_2.runSchematic('karma-project', {
                project: 'lib1'
            }, appTree);
            const testTs = resultTree.read('libs/lib1/src/test.ts').toString();
            expect(testTs).toContain("import 'core-js/es7/reflect';");
            expect(testTs).toContain("import 'zone.js/dist/zone';");
        }));
    });
    describe('applications', () => {
        it('should alter workspace.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const resultTree = yield testing_2.runSchematic('karma-project', {
                project: 'app1'
            }, appTree);
            const workspaceJson = workspace_1.readJsonInTree(resultTree, 'workspace.json');
            expect(workspaceJson.projects.app1.architect.test).toEqual({
                builder: '@angular-devkit/build-angular:karma',
                options: {
                    main: 'apps/app1/src/test.ts',
                    polyfills: 'apps/app1/src/polyfills.ts',
                    tsConfig: 'apps/app1/tsconfig.spec.json',
                    karmaConfig: 'apps/app1/karma.conf.js',
                    styles: [],
                    scripts: [],
                    assets: []
                }
            });
            expect(workspaceJson.projects.app1.architect.lint.options.tsConfig).toContain('apps/app1/tsconfig.spec.json');
        }));
        it('should create a tsconfig.spec.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const resultTree = yield testing_2.runSchematic('karma-project', {
                project: 'app1'
            }, appTree);
            const tsConfig = workspace_1.readJsonInTree(resultTree, 'apps/app1/tsconfig.spec.json');
            expect(tsConfig).toEqual({
                extends: './tsconfig.json',
                compilerOptions: {
                    outDir: '../../dist/out-tsc',
                    types: ['jasmine', 'node']
                },
                files: ['src/test.ts', 'src/polyfills.ts'],
                include: ['**/*.spec.ts', '**/*.d.ts']
            });
        }));
        it('should create test.ts', () => __awaiter(void 0, void 0, void 0, function* () {
            const resultTree = yield testing_2.runSchematic('karma-project', {
                project: 'app1'
            }, appTree);
            const testTs = resultTree.read('apps/app1/src/test.ts').toString();
            expect(testTs).not.toContain("import 'core-js/es7/reflect';");
            expect(testTs).not.toContain("import 'zone.js/dist/zone';");
        }));
    });
});
