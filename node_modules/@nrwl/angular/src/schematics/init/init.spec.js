"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("../../utils/testing");
const testing_2 = require("@nrwl/workspace/testing");
const workspace_1 = require("@nrwl/workspace");
describe('init', () => {
    let appTree;
    beforeEach(() => {
        appTree = testing_2.createEmptyWorkspace(schematics_1.Tree.empty());
    });
    it('should add angular dependencies', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_1.runSchematic('init', {}, appTree);
        const { dependencies, devDependencies } = workspace_1.readJsonInTree(tree, 'package.json');
        expect(dependencies['@angular/animations']).toBeDefined();
        expect(dependencies['@angular/common']).toBeDefined();
        expect(dependencies['@angular/compiler']).toBeDefined();
        expect(dependencies['@angular/core']).toBeDefined();
        expect(dependencies['@angular/platform-browser']).toBeDefined();
        expect(dependencies['@angular/platform-browser-dynamic']).toBeDefined();
        expect(dependencies['@angular/router']).toBeDefined();
        expect(dependencies['core-js']).toBeDefined();
        expect(dependencies['rxjs']).toBeDefined();
        expect(dependencies['zone.js']).toBeDefined();
        expect(devDependencies['@angular/compiler-cli']).toBeDefined();
        expect(devDependencies['@angular/language-service']).toBeDefined();
        expect(devDependencies['@angular-devkit/build-angular']).toBeDefined();
        expect(devDependencies['codelyzer']).toBeDefined();
    }));
    it('should add a postinstall script for ngcc', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_1.runSchematic('init', {
            unitTestRunner: 'karma'
        }, appTree);
        const packageJson = workspace_1.readJsonInTree(tree, 'package.json');
        expect(packageJson.scripts.postinstall).toEqual('ngcc --properties es2015 browser module main --first-only --create-ivy-entry-points');
    }));
    describe('--unit-test-runner', () => {
        describe('karma', () => {
            it('should add karma dependencies', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_1.runSchematic('init', {
                    unitTestRunner: 'karma'
                }, appTree);
                const { devDependencies } = workspace_1.readJsonInTree(tree, 'package.json');
                expect(devDependencies['karma']).toBeDefined();
                expect(devDependencies['karma-chrome-launcher']).toBeDefined();
                expect(devDependencies['karma-coverage-istanbul-reporter']).toBeDefined();
                expect(devDependencies['karma-jasmine']).toBeDefined();
                expect(devDependencies['karma-jasmine-html-reporter']).toBeDefined();
                expect(devDependencies['jasmine-core']).toBeDefined();
                expect(devDependencies['jasmine-spec-reporter']).toBeDefined();
                expect(devDependencies['@types/jasmine']).toBeDefined();
            }));
            it('should add karma configuration', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_1.runSchematic('init', {
                    unitTestRunner: 'karma'
                }, appTree);
                expect(tree.exists('karma.conf.js')).toBeTruthy();
            }));
            it('should set defaults', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_1.runSchematic('init', {
                    unitTestRunner: 'karma'
                }, appTree);
                const { schematics } = workspace_1.readJsonInTree(tree, 'workspace.json');
                expect(schematics['@nrwl/angular:application'].unitTestRunner).toEqual('karma');
                expect(schematics['@nrwl/angular:library'].unitTestRunner).toEqual('karma');
            }));
        });
        describe('jest', () => {
            it('should add jest dependencies', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_1.runSchematic('init', {
                    unitTestRunner: 'jest'
                }, appTree);
                const { devDependencies } = workspace_1.readJsonInTree(tree, 'package.json');
                expect(devDependencies['@nrwl/jest']).toBeDefined();
                expect(devDependencies['jest']).toBeDefined();
                expect(devDependencies['jest-preset-angular']).toBeDefined();
            }));
            it('should add jest configuration', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_1.runSchematic('init', {
                    unitTestRunner: 'jest'
                }, appTree);
                expect(tree.exists('jest.config.js')).toBeTruthy();
            }));
            it('should set defaults', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_1.runSchematic('init', {
                    unitTestRunner: 'jest'
                }, appTree);
                const { schematics } = workspace_1.readJsonInTree(tree, 'workspace.json');
                expect(schematics['@nrwl/angular:application'].unitTestRunner).toEqual('jest');
                expect(schematics['@nrwl/angular:library'].unitTestRunner).toEqual('jest');
            }));
        });
    });
    describe('--e2e-test-runner', () => {
        describe('cypress', () => {
            it('should add cypress dependencies', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_1.runSchematic('init', {
                    unitTestRunner: 'none',
                    e2eTestRunner: 'cypress'
                }, appTree);
                const { devDependencies } = workspace_1.readJsonInTree(tree, 'package.json');
                expect(devDependencies['@nrwl/cypress']).toBeDefined();
                expect(devDependencies['cypress']).toBeDefined();
            }));
            it('should set defaults', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_1.runSchematic('init', {
                    e2eTestRunner: 'cypress'
                }, appTree);
                const { schematics } = workspace_1.readJsonInTree(tree, 'workspace.json');
                expect(schematics['@nrwl/angular:application'].e2eTestRunner).toEqual('cypress');
            }));
        });
        describe('protractor', () => {
            it('should add protractor dependencies', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_1.runSchematic('init', {
                    e2eTestRunner: 'protractor'
                }, appTree);
                const { devDependencies } = workspace_1.readJsonInTree(tree, 'package.json');
                expect(devDependencies['protractor']).toBeDefined();
                expect(devDependencies['jasmine-core']).toBeDefined();
                expect(devDependencies['jasmine-spec-reporter']).toBeDefined();
                expect(devDependencies['@types/jasmine']).toBeDefined();
                expect(devDependencies['@types/jasminewd2']).toBeDefined();
            }));
            it('should set defaults', () => __awaiter(void 0, void 0, void 0, function* () {
                const tree = yield testing_1.runSchematic('init', {
                    e2eTestRunner: 'protractor'
                }, appTree);
                const { schematics } = workspace_1.readJsonInTree(tree, 'workspace.json');
                expect(schematics['@nrwl/angular:application'].e2eTestRunner).toEqual('protractor');
            }));
        });
    });
    describe('defaultCollection', () => {
        it('should be set if none was set before', () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield testing_1.runSchematic('init', {}, appTree);
            const workspaceJson = workspace_1.readJsonInTree(result, 'workspace.json');
            expect(workspaceJson.cli.defaultCollection).toEqual('@nrwl/angular');
        }));
    });
});
