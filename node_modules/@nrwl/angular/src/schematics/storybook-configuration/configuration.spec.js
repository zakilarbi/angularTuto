"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("../../utils/testing");
const stories_spec_1 = require("../stories/stories.spec");
describe('schematic:configuration', () => {
    let appTree;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        appTree = yield stories_spec_1.createTestUILib('test-ui-lib');
    }));
    it('should only configure storybook', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_1.runSchematic('storybook-configuration', {
            name: 'test-ui-lib',
            configureCypress: false,
            generateCypressSpecs: false,
            generateStories: false
        }, appTree);
        expect(tree.exists('libs/test-ui-lib/.storybook/addons.js')).toBeTruthy();
        expect(tree.exists('libs/test-ui-lib/.storybook/config.js')).toBeTruthy();
        expect(tree.exists('libs/test-ui-lib/.storybook/tsconfig.json')).toBeTruthy();
        expect(tree.exists('apps/test-ui-lib-e2e/cypress.json')).toBeFalsy();
        expect(tree.exists('libs/test-ui-lib/src/lib/test-button/test-button.component.stories.ts')).toBeFalsy();
        expect(tree.exists('libs/test-ui-lib/src/lib/test-other/test-other.component.stories.ts')).toBeFalsy();
        expect(tree.exists('apps/test-ui-lib-e2e/src/integration/test-button/test-button.component.spec.ts')).toBeFalsy();
        expect(tree.exists('apps/test-ui-lib-e2e/src/integration/test-other/test-other.component.spec.ts')).toBeFalsy();
    }));
    it('should configure everything at once', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_1.runSchematic('storybook-configuration', {
            name: 'test-ui-lib',
            configureCypress: true,
            generateCypressSpecs: true,
            generateStories: true
        }, appTree);
        expect(tree.exists('libs/test-ui-lib/.storybook/addons.js')).toBeTruthy();
        expect(tree.exists('libs/test-ui-lib/.storybook/config.js')).toBeTruthy();
        expect(tree.exists('libs/test-ui-lib/.storybook/tsconfig.json')).toBeTruthy();
        expect(tree.exists('apps/test-ui-lib-e2e/cypress.json')).toBeTruthy();
        expect(tree.exists('libs/test-ui-lib/src/lib/test-button/test-button.component.stories.ts')).toBeTruthy();
        expect(tree.exists('libs/test-ui-lib/src/lib/test-other/test-other.component.stories.ts')).toBeTruthy();
        expect(tree.exists('apps/test-ui-lib-e2e/src/integration/test-button/test-button.component.spec.ts')).toBeTruthy();
        expect(tree.exists('apps/test-ui-lib-e2e/src/integration/test-other/test-other.component.spec.ts')).toBeTruthy();
    }));
});
