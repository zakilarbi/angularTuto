"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const testing_2 = require("@nrwl/workspace/testing");
const testing_3 = require("../../../utils/testing");
const update_module_name_1 = require("./update-module-name");
describe('updateModuleName Rule', () => {
    let tree;
    const schema = {
        projectName: 'my-source',
        destination: 'my-destination'
    };
    const modulePath = '/libs/my-destination/src/lib/my-destination.module.ts';
    const moduleSpecPath = '/libs/my-destination/src/lib/my-destination.module.spec.ts';
    const indexPath = '/libs/my-destination/src/index.ts';
    const importerPath = '/libs/my-importer/src/lib/my-importing-file.ts';
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = new testing_1.UnitTestTree(schematics_1.Tree.empty());
        tree = testing_2.createEmptyWorkspace(tree);
        // fake a mid-move tree:
        tree = yield testing_3.runSchematic('lib', { name: 'my-destination' }, tree);
        tree.create('/libs/my-destination/src/lib/my-source.module.ts', `import { NgModule } from '@angular/core';
    import { CommonModule } from '@angular/common';
    
    @NgModule({
      imports: [CommonModule]
    })
    export class MySourceModule {}`);
        tree.create('/libs/my-destination/src/lib/my-source.module.spec.ts', `import { async, TestBed } from '@angular/core/testing';
    import { MySourceModule } from './my-source.module';
    
    describe('MySourceModule', () => {
      beforeEach(async(() => {
        TestBed.configureTestingModule({
          imports: [MySourceModule]
        }).compileComponents();
      }));
    
      it('should create', () => {
        expect(MySourceModule).toBeDefined();
      });
    });`);
        tree.overwrite(indexPath, `export * from './lib/my-source.module';
    `);
        tree.delete(modulePath);
        tree.delete(moduleSpecPath);
        tree = yield testing_3.runSchematic('lib', { name: 'my-importer' }, tree);
        tree.create(importerPath, `import { MySourceModule } from '@proj/my-destination';
    
      export class MyExtendedSourceModule extends MySourceModule {}
      `);
    }));
    it('should rename the module files and update the module name', () => __awaiter(void 0, void 0, void 0, function* () {
        tree = (yield testing_3.callRule(update_module_name_1.updateModuleName(schema), tree));
        expect(tree.files).toContain(modulePath);
        expect(tree.files).toContain(moduleSpecPath);
        const moduleFile = tree.read(modulePath).toString('utf-8');
        expect(moduleFile).toContain(`export class MyDestinationModule {}`);
        const moduleSpecFile = tree.read(moduleSpecPath).toString('utf-8');
        expect(moduleSpecFile).toContain(`import { MyDestinationModule } from './my-destination.module';`);
        expect(moduleSpecFile).toContain(`describe('MyDestinationModule', () => {`);
        expect(moduleSpecFile).toContain(`imports: [MyDestinationModule]`);
        expect(moduleSpecFile).toContain(`expect(MyDestinationModule).toBeDefined();`);
    }));
    it('should update any references to the module', () => __awaiter(void 0, void 0, void 0, function* () {
        tree = (yield testing_3.callRule(update_module_name_1.updateModuleName(schema), tree));
        const importerFile = tree.read(importerPath).toString('utf-8');
        expect(importerFile).toContain(`import { MyDestinationModule } from '@proj/my-destination';`);
        expect(importerFile).toContain(`export class MyExtendedSourceModule extends MyDestinationModule {}`);
    }));
    it('should update the index.ts file which exports the module', () => __awaiter(void 0, void 0, void 0, function* () {
        tree = (yield testing_3.callRule(update_module_name_1.updateModuleName(schema), tree));
        const indexFile = tree.read(indexPath).toString('utf-8');
        expect(indexFile).toContain(`export * from './lib/my-destination.module';`);
    }));
});
