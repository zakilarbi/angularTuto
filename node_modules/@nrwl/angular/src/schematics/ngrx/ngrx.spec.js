"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const workspace_2 = require("@nrwl/workspace");
const testing_1 = require("@nrwl/workspace/testing");
const testing_2 = require("../../utils/testing");
const testing_3 = require("@nrwl/workspace/testing");
describe('ngrx', () => {
    let appTree;
    beforeEach(() => {
        appTree = schematics_1.Tree.empty();
        appTree = testing_3.createEmptyWorkspace(appTree);
        appTree = testing_2.createApp(appTree, 'myapp');
    });
    it('should add empty root', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_2.runSchematic('ngrx', {
            name: 'state',
            module: 'apps/myapp/src/app/app.module.ts',
            onlyEmptyRoot: true,
            minimal: false,
            root: true
        }, appTree);
        const appModule = testing_1.getFileContent(tree, '/apps/myapp/src/app/app.module.ts');
        expect(tree.exists('apps/myapp/src/app/+state/state.actions.ts')).toBeFalsy();
        expect(appModule).toContain('StoreModule.forRoot(');
        expect(appModule).toContain('runtimeChecks: {');
        expect(appModule).toContain('strictActionImmutability: true');
        expect(appModule).toContain('strictStateImmutability: true');
        expect(appModule).toContain('EffectsModule.forRoot');
    }));
    it('should add empty root with minimal option', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_2.runSchematic('ngrx', {
            name: 'state',
            module: 'apps/myapp/src/app/app.module.ts',
            root: true,
            onlyEmptyRoot: false,
            minimal: true
        }, appTree);
        const appModule = testing_1.getFileContent(tree, '/apps/myapp/src/app/app.module.ts');
        expect(tree.exists('apps/myapp/src/app/+state/state.actions.ts')).toBeFalsy();
        expect(appModule).toContain('StoreModule.forRoot(');
        expect(appModule).toContain('runtimeChecks: {');
        expect(appModule).toContain('strictActionImmutability: true');
        expect(appModule).toContain('strictStateImmutability: true');
        expect(appModule).toContain('EffectsModule.forRoot([])');
    }));
    it('should add root', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_2.runSchematic('ngrx', {
            name: 'app',
            module: 'apps/myapp/src/app/app.module.ts',
            root: true,
            minimal: false
        }, appTree);
        [
            '/apps/myapp/src/app/+state/app.actions.ts',
            '/apps/myapp/src/app/+state/app.effects.ts',
            '/apps/myapp/src/app/+state/app.effects.spec.ts',
            '/apps/myapp/src/app/+state/app.reducer.ts',
            '/apps/myapp/src/app/+state/app.reducer.spec.ts',
            '/apps/myapp/src/app/+state/app.selectors.ts',
            '/apps/myapp/src/app/+state/app.selectors.spec.ts'
        ].forEach(fileName => {
            expect(tree.exists(fileName)).toBeTruthy();
        });
        // Since we did not include the `--facade` option
        expect(tree.exists('/apps/myapp/src/app/+state/app.facade.ts')).toBeFalsy();
        expect(tree.exists('/apps/myapp/src/app/+state/app.facade.spec.ts')).toBeFalsy();
        const appModule = testing_1.getFileContent(tree, '/apps/myapp/src/app/app.module.ts');
        expect(appModule).toContain(`import { NxModule } from '@nrwl/angular';`);
        expect(appModule).toContain(`import * as fromApp from './+state/app.reducer';`);
        expect(appModule).toContain('NxModule.forRoot');
        expect(appModule).toContain('StoreModule.forRoot');
        expect(appModule).toContain(`StoreModule.forFeature(fromApp.APP_FEATURE_KEY, fromApp.reducer)`);
        expect(appModule).toContain('EffectsModule.forRoot');
        expect(appModule).toContain('metaReducers: !environment.production ? [] : []');
    }));
    it('should add facade to root', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_2.runSchematic('ngrx', {
            name: 'app',
            module: 'apps/myapp/src/app/app.module.ts',
            root: true,
            facade: true,
            minimal: false
        }, appTree);
        const appModule = testing_1.getFileContent(tree, '/apps/myapp/src/app/app.module.ts');
        expect(appModule).toContain(`import { NxModule } from '@nrwl/angular';`);
        expect(appModule).toContain('NxModule.forRoot');
        expect(appModule).toContain('StoreModule.forRoot');
        expect(appModule).toContain('EffectsModule.forRoot');
        expect(appModule).toContain('metaReducers: !environment.production ? [] : []');
        // Do not add Effects file to providers; already registered in EffectsModule
        expect(appModule).toContain('providers: [AppFacade]');
        [
            '/apps/myapp/src/app/+state/app.actions.ts',
            '/apps/myapp/src/app/+state/app.effects.ts',
            '/apps/myapp/src/app/+state/app.effects.spec.ts',
            '/apps/myapp/src/app/+state/app.reducer.ts',
            '/apps/myapp/src/app/+state/app.reducer.spec.ts',
            '/apps/myapp/src/app/+state/app.facade.ts',
            '/apps/myapp/src/app/+state/app.facade.spec.ts',
            '/apps/myapp/src/app/+state/app.selectors.ts',
            '/apps/myapp/src/app/+state/app.selectors.spec.ts'
        ].forEach(fileName => {
            expect(tree.exists(fileName)).toBeTruthy();
        });
    }));
    it('should not add RouterStoreModule only if the module does not reference the router', () => __awaiter(void 0, void 0, void 0, function* () {
        const newTree = testing_2.createApp(appTree, 'myapp-norouter', false);
        const tree = yield testing_2.runSchematic('ngrx', {
            name: 'app',
            module: 'apps/myapp-norouter/src/app/app.module.ts',
            root: true
        }, newTree);
        const appModule = testing_1.getFileContent(tree, '/apps/myapp-norouter/src/app/app.module.ts');
        expect(appModule).not.toContain('StoreRouterConnectingModule.forRoot()');
    }));
    it('should add feature', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_2.runSchematic('ngrx', {
            name: 'state',
            module: 'apps/myapp/src/app/app.module.ts',
            minimal: false
        }, appTree);
        const appModule = testing_1.getFileContent(tree, '/apps/myapp/src/app/app.module.ts');
        expect(appModule).toContain('StoreModule.forFeature');
        expect(appModule).toContain('EffectsModule.forFeature');
        expect(appModule).not.toContain('!environment.production ? [] : []');
        expect(tree.exists(`/apps/myapp/src/app/+state/state.actions.ts`)).toBeTruthy();
    }));
    it('should add with custom directoryName', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_2.runSchematic('ngrx', {
            name: 'state',
            module: 'apps/myapp/src/app/app.module.ts',
            directory: 'myCustomState',
            minimal: false
        }, appTree);
        const appModule = testing_1.getFileContent(tree, '/apps/myapp/src/app/app.module.ts');
        expect(appModule).toContain('StoreModule.forFeature');
        expect(appModule).toContain('EffectsModule.forFeature');
        expect(appModule).not.toContain('!environment.production ? [] : []');
        expect(tree.exists(`/apps/myapp/src/app/my-custom-state/state.actions.ts`)).toBeTruthy();
    }));
    it('should only add files', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_2.runSchematic('ngrx', {
            name: 'state',
            module: 'apps/myapp/src/app/app.module.ts',
            onlyAddFiles: true,
            facade: true,
            minimal: false
        }, appTree);
        const appModule = testing_1.getFileContent(tree, '/apps/myapp/src/app/app.module.ts');
        expect(appModule).not.toContain('StoreModule');
        expect(appModule).not.toContain('!environment.production ? [] : []');
        [
            '/apps/myapp/src/app/+state/state.effects.ts',
            '/apps/myapp/src/app/+state/state.facade.ts',
            '/apps/myapp/src/app/+state/state.reducer.ts',
            '/apps/myapp/src/app/+state/state.selectors.ts',
            '/apps/myapp/src/app/+state/state.effects.spec.ts',
            '/apps/myapp/src/app/+state/state.facade.spec.ts',
            '/apps/myapp/src/app/+state/state.selectors.spec.ts'
        ].forEach(fileName => {
            expect(tree.exists(fileName)).toBeTruthy();
        });
    }));
    it('should only add files with skipImport option', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_2.runSchematic('ngrx', {
            name: 'state',
            module: 'apps/myapp/src/app/app.module.ts',
            onlyAddFiles: false,
            skipImport: true,
            facade: true,
            minimal: false
        }, appTree);
        const appModule = testing_1.getFileContent(tree, '/apps/myapp/src/app/app.module.ts');
        expect(appModule).not.toContain('StoreModule');
        expect(appModule).not.toContain('!environment.production ? [] : []');
        [
            '/apps/myapp/src/app/+state/state.effects.ts',
            '/apps/myapp/src/app/+state/state.facade.ts',
            '/apps/myapp/src/app/+state/state.reducer.ts',
            '/apps/myapp/src/app/+state/state.selectors.ts',
            '/apps/myapp/src/app/+state/state.effects.spec.ts',
            '/apps/myapp/src/app/+state/state.facade.spec.ts',
            '/apps/myapp/src/app/+state/state.selectors.spec.ts'
        ].forEach(fileName => {
            expect(tree.exists(fileName)).toBeTruthy();
        });
    }));
    it('should update package.json', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield testing_2.runSchematic('ngrx', {
            name: 'state',
            module: 'apps/myapp/src/app/app.module.ts'
        }, appTree);
        const packageJson = workspace_1.readJsonInTree(tree, 'package.json');
        expect(packageJson.dependencies['@ngrx/store']).toBeDefined();
        expect(packageJson.dependencies['@ngrx/router-store']).toBeDefined();
        expect(packageJson.dependencies['@ngrx/effects']).toBeDefined();
        expect(packageJson.devDependencies['@ngrx/store-devtools']).toBeDefined();
    }));
    it('should error when no module is provided', () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            yield testing_2.runSchematic('ngrx', {
                name: 'state',
                module: ''
            }, appTree);
            fail();
        }
        catch (e) {
            expect(e.message).toEqual('The required --module option must be passed');
        }
    }));
    it('should error the module could not be found', () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            yield testing_2.runSchematic('ngrx', {
                name: 'state',
                module: 'does-not-exist.ts'
            }, appTree);
        }
        catch (e) {
            expect(e.message).toEqual('Path does not exist: does-not-exist.ts');
        }
    }));
    describe('code generation', () => {
        it('should scaffold the ngrx "user" files without a facade', () => __awaiter(void 0, void 0, void 0, function* () {
            const appConfig = testing_2.getAppConfig();
            const hasFile = file => expect(tree.exists(file)).toBeTruthy();
            const missingFile = file => expect(tree.exists(file)).not.toBeTruthy();
            const statePath = `${workspace_2.findModuleParent(appConfig.appModule)}/+state`;
            const tree = yield buildNgrxTree(appConfig);
            hasFile(`${statePath}/user.actions.ts`);
            hasFile(`${statePath}/user.effects.ts`);
            hasFile(`${statePath}/user.effects.spec.ts`);
            missingFile(`${statePath}/user.facade.ts`);
            missingFile(`${statePath}/user.facade.spec.ts`);
            hasFile(`${statePath}/user.reducer.ts`);
            hasFile(`${statePath}/user.reducer.spec.ts`);
            hasFile(`${statePath}/user.selectors.ts`);
        }));
        it('should scaffold the ngrx "user" files WITH a facade', () => __awaiter(void 0, void 0, void 0, function* () {
            const appConfig = testing_2.getAppConfig();
            const hasFile = file => expect(tree.exists(file)).toBeTruthy();
            const tree = yield buildNgrxTree(appConfig, 'user', true);
            const statePath = `${workspace_2.findModuleParent(appConfig.appModule)}/+state`;
            hasFile(`${statePath}/user.actions.ts`);
            hasFile(`${statePath}/user.effects.ts`);
            hasFile(`${statePath}/user.facade.ts`);
            hasFile(`${statePath}/user.reducer.ts`);
            hasFile(`${statePath}/user.selectors.ts`);
            hasFile(`${statePath}/user.reducer.spec.ts`);
            hasFile(`${statePath}/user.effects.spec.ts`);
            hasFile(`${statePath}/user.selectors.spec.ts`);
            hasFile(`${statePath}/user.facade.spec.ts`);
        }));
        it('should build the ngrx actions', () => __awaiter(void 0, void 0, void 0, function* () {
            const appConfig = testing_2.getAppConfig();
            const tree = yield buildNgrxTree(appConfig, 'users');
            const statePath = `${workspace_2.findModuleParent(appConfig.appModule)}/+state`;
            const content = testing_1.getFileContent(tree, `${statePath}/users.actions.ts`);
            expect(content).toContain('UsersActionTypes');
            expect(content).toContain(`LoadUsers = '[Users] Load Users'`);
            expect(content).toContain(`UsersLoaded = '[Users] Users Loaded'`);
            expect(content).toContain(`UsersLoadError = '[Users] Users Load Error'`);
            expect(content).toContain('class LoadUsers implements Action');
            expect(content).toContain('class UsersLoaded implements Action');
            expect(content).toContain('type UsersAction = LoadUsers | UsersLoaded | UsersLoadError');
            expect(content).toContain('export const fromUsersActions');
        }));
        it('should build the ngrx selectors', () => __awaiter(void 0, void 0, void 0, function* () {
            const appConfig = testing_2.getAppConfig();
            const tree = yield buildNgrxTree(appConfig, 'users');
            const statePath = `${workspace_2.findModuleParent(appConfig.appModule)}/+state`;
            const content = testing_1.getFileContent(tree, `${statePath}/users.selectors.ts`);
            [
                `import { USERS_FEATURE_KEY, UsersState } from './users.reducer'`,
                `export const usersQuery`
            ].forEach(text => {
                expect(content).toContain(text);
            });
        }));
        it('should build the ngrx facade', () => __awaiter(void 0, void 0, void 0, function* () {
            const appConfig = testing_2.getAppConfig();
            const includeFacade = true;
            const tree = yield buildNgrxTree(appConfig, 'users', includeFacade);
            const statePath = `${workspace_2.findModuleParent(appConfig.appModule)}/+state`;
            const content = testing_1.getFileContent(tree, `${statePath}/users.facade.ts`);
            [
                `import { UsersPartialState } from './users.reducer'`,
                `import { usersQuery } from './users.selectors'`,
                `export class UsersFacade`
            ].forEach(text => {
                expect(content).toContain(text);
            });
        }));
        it('should build the ngrx reducer', () => __awaiter(void 0, void 0, void 0, function* () {
            const appConfig = testing_2.getAppConfig();
            const tree = yield buildNgrxTree(appConfig, 'user');
            const statePath = `${workspace_2.findModuleParent(appConfig.appModule)}/+state`;
            const content = testing_1.getFileContent(tree, `${statePath}/user.reducer.ts`);
            [
                `import { UserAction, UserActionTypes } from \'./user.actions\'`,
                `export interface User`,
                `export interface UserState`,
                'export function reducer',
                'state: UserState = initialState',
                'action: UserAction',
                '): UserState',
                'case UserActionTypes.UserLoaded'
            ].forEach(text => {
                expect(content).toContain(text);
            });
        }));
        it('should build the ngrx effects', () => __awaiter(void 0, void 0, void 0, function* () {
            const appConfig = testing_2.getAppConfig();
            const tree = yield buildNgrxTree(appConfig, 'users');
            const statePath = `${workspace_2.findModuleParent(appConfig.appModule)}/+state`;
            const content = testing_1.getFileContent(tree, `${statePath}/users.effects.ts`);
            [
                `import { DataPersistence } from '@nrwl/angular'`,
                `
import {
  LoadUsers,
  UsersLoaded,
  UsersLoadError,
  UsersActionTypes
} from './users.actions';`,
                `loadUsers$`,
                `run: (action: LoadUsers, state: UsersPartialState)`,
                `return new UsersLoaded([])`,
                `return new UsersLoadError(error)`,
                'private actions$: Actions',
                'private dataPersistence: DataPersistence<UsersPartialState>'
            ].forEach(text => {
                expect(content).toContain(text);
            });
        }));
    });
    describe('unit tests', () => {
        it('should produce proper specs for the ngrx reducer', () => __awaiter(void 0, void 0, void 0, function* () {
            const appConfig = testing_2.getAppConfig();
            const tree = yield buildNgrxTree(appConfig);
            const statePath = `${workspace_2.findModuleParent(appConfig.appModule)}/+state`;
            const contents = tree.readContent(`${statePath}/user.reducer.spec.ts`);
            expect(contents).toContain(`describe('User Reducer', () => {`);
            expect(contents).toContain('const result = reducer(initialState, action);');
        }));
        it('should update the barrel API with exports for ngrx facade, selector, and reducer', () => __awaiter(void 0, void 0, void 0, function* () {
            appTree = testing_2.createLib(appTree, 'flights');
            let libConfig = testing_2.getLibConfig();
            let tree = yield testing_2.runSchematic('ngrx', {
                name: 'super-users',
                module: libConfig.module,
                facade: true
            }, appTree);
            const barrel = tree.readContent(libConfig.barrel);
            expect(barrel).toContain(`export * from './lib/+state/super-users.facade';`);
        }));
        it('should not update the barrel API with a facade', () => __awaiter(void 0, void 0, void 0, function* () {
            appTree = testing_2.createLib(appTree, 'flights');
            let libConfig = testing_2.getLibConfig();
            let tree = yield testing_2.runSchematic('ngrx', {
                name: 'super-users',
                module: libConfig.module,
                facade: false
            }, appTree);
            const barrel = tree.readContent(libConfig.barrel);
            expect(barrel).not.toContain(`export * from './lib/+state/super-users.facade';`);
        }));
        it('should produce proper tests for the ngrx reducer for a name with a dash', () => __awaiter(void 0, void 0, void 0, function* () {
            const appConfig = testing_2.getAppConfig();
            const tree = yield testing_2.runSchematic('ngrx', {
                name: 'super-users',
                module: appConfig.appModule,
                minimal: false
            }, appTree);
            const statePath = `${workspace_2.findModuleParent(appConfig.appModule)}/+state`;
            const contents = tree.readContent(`${statePath}/super-users.reducer.spec.ts`);
            expect(contents).toContain(`describe('SuperUsers Reducer', () => {`);
            expect(contents).toContain(`const result = reducer(initialState, action);`);
        }));
    });
    describe('creators syntax', () => {
        let appConfig = testing_2.getAppConfig();
        let tree;
        let statePath;
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            appConfig = testing_2.getAppConfig();
            tree = yield testing_2.runSchematic('ngrx', {
                name: 'users',
                module: appConfig.appModule,
                syntax: 'creators',
                minimal: false,
                facade: true,
                useDataPersistance: false
            }, appTree);
            statePath = `${workspace_2.findModuleParent(appConfig.appModule)}/+state`;
        }));
        it('should generate a set of actions for the feature', () => __awaiter(void 0, void 0, void 0, function* () {
            const content = tree.readContent(`${statePath}/users.actions.ts`);
            [
                '[Users] Load Users',
                '[Users] Load Users Success',
                'props<{ users: UsersEntity[] }>()',
                '[Users] Load Users Failure',
                'props<{ error: any }>()'
            ].forEach(text => {
                expect(content).toContain(text);
            });
        }));
        it('should generate a reducer for the feature', () => __awaiter(void 0, void 0, void 0, function* () {
            const content = tree.readContent(`${statePath}/users.reducer.ts`);
            [
                `export const USERS_FEATURE_KEY = 'users';`,
                `const usersReducer = createReducer`,
                'export function reducer(state: State | undefined, action: Action) {'
            ].forEach(text => {
                expect(content).toContain(text);
            });
        }));
        it('should generate effects for the feature', () => __awaiter(void 0, void 0, void 0, function* () {
            const content = tree.readContent(`${statePath}/users.effects.ts`);
            [
                `import { createEffect, Actions, ofType } from '@ngrx/effects';`,
                'fetch({'
            ].forEach(text => {
                expect(content).toContain(text);
            });
        }));
        it('should generate selectors for the feature', () => __awaiter(void 0, void 0, void 0, function* () {
            const content = tree.readContent(`${statePath}/users.selectors.ts`);
            [
                `
import {
  USERS_FEATURE_KEY,
  State,
  UsersPartialState,
  usersAdapter
} from './users.reducer';`,
                `const { selectAll, selectEntities } = usersAdapter.getSelectors();`
            ].forEach(text => {
                expect(content).toContain(text);
            });
        }));
        it('should generate a facade for the feature if enabled', () => __awaiter(void 0, void 0, void 0, function* () {
            const content = tree.readContent(`${statePath}/users.facade.ts`);
            [
                `loaded$ = this.store.pipe(select(UsersSelectors.getUsersLoaded));`,
                `allUsers$ = this.store.pipe(select(UsersSelectors.getAllUsers));`,
                `selectedUsers$ = this.store.pipe(select(UsersSelectors.getSelected));`
            ].forEach(text => {
                expect(content).toContain(text);
            });
        }));
        it('should generate a models file for the feature', () => __awaiter(void 0, void 0, void 0, function* () {
            const content = tree.readContent(`${statePath}/users.models.ts`);
            [
                'export interface UsersEntity',
                'id: string | number; // Primary ID'
            ].forEach(text => {
                expect(content).toContain(text);
            });
        }));
        it('should use DataPersistence operators when useDataPersistence is set to false', () => __awaiter(void 0, void 0, void 0, function* () {
            appTree = schematics_1.Tree.empty();
            appTree = testing_3.createEmptyWorkspace(appTree);
            appTree = testing_2.createApp(appTree, 'myapp');
            const tree = yield testing_2.runSchematic('ngrx', {
                name: 'users',
                module: appConfig.appModule,
                syntax: 'creators',
                facade: true,
                minimal: false
            }, appTree);
            const content = tree.readContent(`${statePath}/users.effects.ts`);
            [`{ fetch }`, `, ofType`, `ofType(UsersActions.loadUsers),`].forEach(text => {
                expect(content).toContain(text);
            });
            expect(content).not.toContain('dataPersistence.fetch');
        }));
        it('should re-export actions, state, and selectors using barrels if enabled', () => __awaiter(void 0, void 0, void 0, function* () {
            appTree = schematics_1.Tree.empty();
            appTree = testing_3.createEmptyWorkspace(appTree);
            appTree = testing_2.createApp(appTree, 'myapp');
            appTree.create('/apps/myapp/src/index.ts', '');
            const tree = yield testing_2.runSchematic('ngrx', {
                name: 'users',
                module: appConfig.appModule,
                syntax: 'creators',
                barrels: true
            }, appTree);
            const content = tree.readContent('/apps/myapp/src/index.ts');
            [
                `import * as UsersActions from './lib/+state/users.actions';`,
                `import * as UsersFeature from './lib/+state/users.reducer';`,
                `import * as UsersSelectors from './lib/+state/users.selectors';`,
                `export { UsersActions, UsersFeature, UsersSelectors };`,
                `export * from './lib/+state/users.models';`
            ].forEach(text => {
                expect(content).toContain(text);
            });
        }));
    });
    function buildNgrxTree(appConfig, featureName = 'user', withFacade = false) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield testing_2.runSchematic('ngrx', {
                name: featureName,
                module: appConfig.appModule,
                facade: withFacade,
                syntax: 'classes',
                minimal: false,
                useDataPersistance: true
            }, appTree);
        });
    }
});
