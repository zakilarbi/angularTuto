"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const package_impl_1 = require("./package.impl");
const testing_1 = require("../../utils/testing");
const projectGraphUtils = require("@nrwl/workspace/src/core/project-graph");
const project_graph_1 = require("@nrwl/workspace/src/core/project-graph");
const fileUtils = require("@nrwl/workspace/src/utils/fileutils");
jest.mock('ng-packagr');
const ngPackagrImport = require("ng-packagr");
const ng = require("@angular/compiler-cli");
const ng_packagr_1 = require("ng-packagr");
class NgPackagrMock extends ng_packagr_1.NgPackagr {
    constructor() {
        super(null);
    }
}
describe('AngularLibraryWebBuildBuilder', () => {
    let context;
    let testOptions;
    let ngPackagrMock;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        context = yield testing_1.getMockContext();
        // NgPackagr has some weird fluent API. I wonder whether
        // I could simplify this mock
        ngPackagrMock = new NgPackagrMock();
        spyOn(ngPackagrMock, 'build').and.callFake(() => {
            return Promise.resolve();
        });
        spyOn(ngPackagrMock, 'forProject').and.callThrough();
        spyOn(ngPackagrMock, 'withTsConfig').and.callThrough();
        spyOn(ngPackagrImport, 'ngPackagr').and.callFake(() => {
            return ngPackagrMock;
        });
        // used for updating the json files
        spyOn(fileUtils, 'writeJsonFile');
        // parent tsconfig
        spyOn(ng, 'readConfiguration').and.callFake(() => {
            return {
                options: {
                    paths: {
                        '@proj/buildable-child': []
                    }
                }
            };
        });
        spyOn(fileUtils, 'fileExists').and.returnValue(true);
        context.target = {
            project: 'buildable-parent',
            target: 'build'
        };
        testOptions = {
            tsConfig: 'libs/publishable-parent/tsconfig.lib.json',
            project: 'libs/publishable-parent/ng-package.json'
        };
    }));
    it('should invoke ng-packagr for a libary without any dependencies', () => __awaiter(void 0, void 0, void 0, function* () {
        spyOn(projectGraphUtils, 'createProjectGraph').and.callFake(() => {
            return {
                nodes: {
                    'buildable-parent': {
                        type: project_graph_1.ProjectType.lib,
                        name: 'buildable-parent',
                        data: { files: [], root: 'libs/buildable-parent' }
                    }
                },
                dependencies: {}
            };
        });
        // act
        const result = yield package_impl_1.run(testOptions, context).toPromise();
        expect(result.success).toBeTruthy();
        expect(ngPackagrMock.build).toHaveBeenCalled();
    }));
    describe('with dependent libraries', () => {
        beforeEach(() => {
            // create project graph with dependencies
            spyOn(projectGraphUtils, 'createProjectGraph').and.callFake(() => {
                return {
                    nodes: {
                        'buildable-parent': {
                            type: project_graph_1.ProjectType.lib,
                            name: 'buildable-parent',
                            data: {
                                files: [],
                                root: 'libs/buildable-parent',
                                architect: {
                                    build: {
                                        builder: 'any builder'
                                    }
                                }
                            }
                        },
                        'buildable-child': {
                            type: project_graph_1.ProjectType.lib,
                            name: 'buildable-child',
                            data: {
                                files: [],
                                root: 'libs/buildable-child',
                                prefix: 'proj',
                                architect: {
                                    build: {
                                        builder: 'any builder'
                                    }
                                }
                            }
                        }
                    },
                    dependencies: {
                        'buildable-parent': [
                            {
                                type: project_graph_1.ProjectType.lib,
                                target: 'buildable-child',
                                source: null
                            }
                        ],
                        'buildable-child': []
                    }
                };
            });
        });
        it('should properly set the TSConfig paths', () => __awaiter(void 0, void 0, void 0, function* () {
            spyOn(fileUtils, 'readJsonFile').and.returnValue({
                name: '@proj/buildable-child',
                version: '1.2.3'
            });
            // act
            const result = yield package_impl_1.run(testOptions, context).toPromise();
            // assert
            expect(result.success).toBeTruthy();
            expect(ngPackagrMock.withTsConfig).toHaveBeenCalledWith(jasmine.objectContaining({
                options: {
                    paths: { '@proj/buildable-child': ['dist/libs/buildable-child'] }
                }
            }));
        }));
        it('should update the package.json', () => __awaiter(void 0, void 0, void 0, function* () {
            spyOn(fileUtils, 'readJsonFile').and.callFake((path) => {
                if (path.endsWith('buildable-parent/package.json')) {
                    return {
                        name: '@proj/buildable-parent',
                        version: '3.3.3'
                    };
                }
                else {
                    return {
                        name: '@proj/buildable-child',
                        version: '1.2.3'
                    };
                }
            });
            // act
            const result = yield package_impl_1.run(testOptions, context).toPromise();
            // assert
            expect(result.success).toBeTruthy();
            expect(fileUtils.writeJsonFile).toHaveBeenCalledWith('dist/libs/buildable-parent/package.json', jasmine.objectContaining({
                dependencies: {
                    '@proj/buildable-child': '1.2.3'
                }
            }));
        }));
        ['dependencies', 'devDependencies', 'peerDependencies'].forEach((depConfigName) => {
            it(`should not update the package.json if the ${depConfigName} already contain a matching entry`, () => __awaiter(void 0, void 0, void 0, function* () {
                spyOn(fileUtils, 'readJsonFile').and.callFake((path) => {
                    if (path.endsWith('buildable-parent/package.json')) {
                        return {
                            name: '@proj/buildable-parent',
                            version: '1.2.3',
                            [depConfigName]: {
                                '@proj/buildable-child': '1.1.1'
                            }
                        };
                    }
                    else {
                        return {
                            name: '@proj/buildable-child',
                            version: '1.2.3'
                        };
                    }
                });
                // act
                const result = yield package_impl_1.run(testOptions, context).toPromise();
                // assert
                expect(result.success).toBeTruthy();
                expect(fileUtils.writeJsonFile).not.toHaveBeenCalled();
            }));
        });
    });
});
