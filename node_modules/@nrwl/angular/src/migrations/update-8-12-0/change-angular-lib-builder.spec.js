"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const testing_1 = require("@angular-devkit/schematics/testing");
const path_1 = require("path");
describe('Update Angular library builder', () => {
    let tree;
    let schematicRunner;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = new testing_1.UnitTestTree(schematics_1.Tree.empty());
        schematicRunner = new testing_1.SchematicTestRunner('@nrwl/workspace', path_1.join(__dirname, '../../../migrations.json'));
    }));
    it('should overwrite the usual builder with @nrwl/angular:package', () => __awaiter(void 0, void 0, void 0, function* () {
        tree.create('workspace.json', JSON.stringify({
            projects: {
                ['buildable-lib']: {
                    projectType: 'library',
                    architect: {
                        build: {
                            builder: '@angular-devkit/build-ng-packagr:build'
                        }
                    }
                },
                ['anotherbuildable-lib']: {
                    projectType: 'library',
                    architect: {
                        build: {
                            builder: '@angular-devkit/build-ng-packagr:build'
                        }
                    }
                },
                ['nonbuildable-lib']: {
                    projectType: 'library',
                    architect: {}
                }
            }
        }));
        yield schematicRunner
            .runSchematicAsync('change-angular-lib-builder', {}, tree)
            .toPromise();
        const config = workspace_1.readWorkspace(tree);
        expect(config.projects['buildable-lib'].architect.build.builder).toBe('@nrwl/angular:package');
        expect(config.projects['anotherbuildable-lib'].architect.build.builder).toBe('@nrwl/angular:package');
        expect(config.projects['nonbuildable-lib'].architect.build).not.toBeDefined();
    }));
});
