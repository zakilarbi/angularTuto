"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const testing_1 = require("../../utils/testing");
describe('add-postinstall', () => {
    let tree;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = schematics_1.Tree.empty();
        tree = yield testing_1.callRule(workspace_1.updateJsonInTree('package.json', () => ({})), tree);
    }));
    it('should add a postinstall for "ngcc"', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield testing_1.runMigration('add-postinstall', {}, tree);
        const packageJson = workspace_1.readJsonInTree(result, 'package.json');
        expect(packageJson.scripts.postinstall).toEqual('ngcc --properties es2015 browser module main --first-only --create-ivy-entry-points');
    }));
    it('should not add a postinstall if one exists', () => __awaiter(void 0, void 0, void 0, function* () {
        tree = yield testing_1.callRule(workspace_1.updateJsonInTree('package.json', json => {
            json.scripts = {
                postinstall: './postinstall.sh'
            };
            return json;
        }), tree);
        const result = yield testing_1.runMigration('add-postinstall', {}, tree);
        const packageJson = workspace_1.readJsonInTree(result, 'package.json');
        expect(packageJson.scripts.postinstall).toEqual('./postinstall.sh');
    }));
});
