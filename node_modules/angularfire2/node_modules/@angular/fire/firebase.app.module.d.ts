import { InjectionToken, NgZone, Version } from '@angular/core';
import { auth, database, messaging, storage, firestore, functions } from 'firebase/app';
import * as ɵngcc0 from '@angular/core';
export declare type FirebaseOptions = {
    [key: string]: any;
};
export declare type FirebaseAppConfig = {
    [key: string]: any;
};
export declare const FirebaseOptionsToken: InjectionToken<FirebaseOptions>;
export declare const FirebaseNameOrConfigToken: InjectionToken<string | FirebaseAppConfig | undefined>;
export declare const FIREBASE_OPTIONS: InjectionToken<FirebaseOptions>;
export declare const FIREBASE_APP_NAME: InjectionToken<string | FirebaseAppConfig | undefined>;
export declare type FirebaseDatabase = database.Database;
export declare type FirebaseAuth = auth.Auth;
export declare type FirebaseAnalytics = any;
export declare type FirebaseMessaging = messaging.Messaging;
export declare type FirebasePerformance = any;
export declare type FirebaseStorage = storage.Storage;
export declare type FirebaseFirestore = firestore.Firestore;
export declare type FirebaseFunctions = functions.Functions;
export declare type FirebaseRemoteConfig = any;
export declare class FirebaseApp {
    name: string;
    options: {};
    analytics: () => FirebaseAnalytics;
    auth: () => FirebaseAuth;
    database: (databaseURL?: string) => FirebaseDatabase;
    messaging: () => FirebaseMessaging;
    performance: () => FirebasePerformance;
    storage: (storageBucket?: string) => FirebaseStorage;
    delete: () => Promise<void>;
    firestore: () => FirebaseFirestore;
    functions: (region?: string) => FirebaseFunctions;
    remoteConfig: () => FirebaseRemoteConfig;
}
export declare const VERSION: Version;
export declare function _firebaseAppFactory(options: FirebaseOptions, zone: NgZone, nameOrConfig?: string | FirebaseAppConfig | null): FirebaseApp;
export declare class AngularFireModule {
    static initializeApp(options: FirebaseOptions, nameOrConfig?: string | FirebaseAppConfig): ({
        ngModule: typeof AngularFireModule;
        providers: {
            provide: InjectionToken<string | FirebaseAppConfig | undefined>;
            useValue: string | FirebaseAppConfig | undefined;
        }[];
    })&{ngModule:AngularFireModule};
    constructor(platformId: Object);
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AngularFireModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<AngularFireModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZWJhc2UuYXBwLm1vZHVsZS5kLnRzIiwic291cmNlcyI6WyJmaXJlYmFzZS5hcHAubW9kdWxlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRkFBK0Y7Ozs7OzttQ0FNMUY7QUFDTDs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgTmdab25lLCBWZXJzaW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBhdXRoLCBkYXRhYmFzZSwgbWVzc2FnaW5nLCBzdG9yYWdlLCBmaXJlc3RvcmUsIGZ1bmN0aW9ucyB9IGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEZpcmViYXNlT3B0aW9ucyA9IHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG59O1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBGaXJlYmFzZUFwcENvbmZpZyA9IHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG59O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgRmlyZWJhc2VPcHRpb25zVG9rZW46IEluamVjdGlvblRva2VuPEZpcmViYXNlT3B0aW9ucz47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBGaXJlYmFzZU5hbWVPckNvbmZpZ1Rva2VuOiBJbmplY3Rpb25Ub2tlbjxzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyB8IHVuZGVmaW5lZD47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBGSVJFQkFTRV9PUFRJT05TOiBJbmplY3Rpb25Ub2tlbjxGaXJlYmFzZU9wdGlvbnM+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgRklSRUJBU0VfQVBQX05BTUU6IEluamVjdGlvblRva2VuPHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnIHwgdW5kZWZpbmVkPjtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRmlyZWJhc2VEYXRhYmFzZSA9IGRhdGFiYXNlLkRhdGFiYXNlO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBGaXJlYmFzZUF1dGggPSBhdXRoLkF1dGg7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEZpcmViYXNlQW5hbHl0aWNzID0gYW55O1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBGaXJlYmFzZU1lc3NhZ2luZyA9IG1lc3NhZ2luZy5NZXNzYWdpbmc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEZpcmViYXNlUGVyZm9ybWFuY2UgPSBhbnk7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEZpcmViYXNlU3RvcmFnZSA9IHN0b3JhZ2UuU3RvcmFnZTtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRmlyZWJhc2VGaXJlc3RvcmUgPSBmaXJlc3RvcmUuRmlyZXN0b3JlO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBGaXJlYmFzZUZ1bmN0aW9ucyA9IGZ1bmN0aW9ucy5GdW5jdGlvbnM7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEZpcmViYXNlUmVtb3RlQ29uZmlnID0gYW55O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmlyZWJhc2VBcHAge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBvcHRpb25zOiB7fTtcbiAgICBhbmFseXRpY3M6ICgpID0+IEZpcmViYXNlQW5hbHl0aWNzO1xuICAgIGF1dGg6ICgpID0+IEZpcmViYXNlQXV0aDtcbiAgICBkYXRhYmFzZTogKGRhdGFiYXNlVVJMPzogc3RyaW5nKSA9PiBGaXJlYmFzZURhdGFiYXNlO1xuICAgIG1lc3NhZ2luZzogKCkgPT4gRmlyZWJhc2VNZXNzYWdpbmc7XG4gICAgcGVyZm9ybWFuY2U6ICgpID0+IEZpcmViYXNlUGVyZm9ybWFuY2U7XG4gICAgc3RvcmFnZTogKHN0b3JhZ2VCdWNrZXQ/OiBzdHJpbmcpID0+IEZpcmViYXNlU3RvcmFnZTtcbiAgICBkZWxldGU6ICgpID0+IFByb21pc2U8dm9pZD47XG4gICAgZmlyZXN0b3JlOiAoKSA9PiBGaXJlYmFzZUZpcmVzdG9yZTtcbiAgICBmdW5jdGlvbnM6IChyZWdpb24/OiBzdHJpbmcpID0+IEZpcmViYXNlRnVuY3Rpb25zO1xuICAgIHJlbW90ZUNvbmZpZzogKCkgPT4gRmlyZWJhc2VSZW1vdGVDb25maWc7XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCBWRVJTSU9OOiBWZXJzaW9uO1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gX2ZpcmViYXNlQXBwRmFjdG9yeShvcHRpb25zOiBGaXJlYmFzZU9wdGlvbnMsIHpvbmU6IE5nWm9uZSwgbmFtZU9yQ29uZmlnPzogc3RyaW5nIHwgRmlyZWJhc2VBcHBDb25maWcgfCBudWxsKTogRmlyZWJhc2VBcHA7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBbmd1bGFyRmlyZU1vZHVsZSB7XG4gICAgc3RhdGljIGluaXRpYWxpemVBcHAob3B0aW9uczogRmlyZWJhc2VPcHRpb25zLCBuYW1lT3JDb25maWc/OiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyk6IHtcbiAgICAgICAgbmdNb2R1bGU6IHR5cGVvZiBBbmd1bGFyRmlyZU1vZHVsZTtcbiAgICAgICAgcHJvdmlkZXJzOiB7XG4gICAgICAgICAgICBwcm92aWRlOiBJbmplY3Rpb25Ub2tlbjxzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyB8IHVuZGVmaW5lZD47XG4gICAgICAgICAgICB1c2VWYWx1ZTogc3RyaW5nIHwgRmlyZWJhc2VBcHBDb25maWcgfCB1bmRlZmluZWQ7XG4gICAgICAgIH1bXTtcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKHBsYXRmb3JtSWQ6IE9iamVjdCk7XG59XG4iXX0=